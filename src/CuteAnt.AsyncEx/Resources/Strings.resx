<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentOutOfRange_BatchSizeMustBeNoGreaterThanBoundedCapacity" xml:space="preserve">
    <value>Number must be no greater than the value specified in BoundedCapacity.</value>
  </data>
  <data name="ArgumentOutOfRange_GenericPositive" xml:space="preserve">
    <value>Number must be positive.</value>
  </data>
  <data name="ArgumentOutOfRange_NeedNonNegOrNegative1" xml:space="preserve">
    <value>Number must be either non-negative and less than or equal to Int32.MaxValue or -1</value>
  </data>
  <data name="Argument_BoundedCapacityNotSupported" xml:space="preserve">
    <value>BoundedCapacity must be Unbounded or -1 for this dataflow block.</value>
  </data>
  <data name="Argument_CantConsumeFromANullSource" xml:space="preserve">
    <value>The argument must be false if no source from which to consume is specified.</value>
  </data>
  <data name="Argument_InvalidMessageHeader" xml:space="preserve">
    <value>The DataflowMessageHeader instance does not represent a valid message header.</value>
  </data>
  <data name="Argument_InvalidMessageId" xml:space="preserve">
    <value>To construct a DataflowMessageHeader instance, either pass a non-zero value or use the parameterless constructor.</value>
  </data>
  <data name="Argument_InvalidSourceForFilteredLink" xml:space="preserve">
    <value>This block must only be used with the source from which it was created.</value>
  </data>
  <data name="Argument_NonGreedyNotSupported" xml:space="preserve">
    <value>Greedy must be true for this dataflow block.</value>
  </data>
  <data name="ArrayInitializedStateNotEqual" xml:space="preserve">
    <value>Object is not a array with the same initialization state as the array to compare it to.</value>
  </data>
  <data name="ArrayLengthsNotEqual" xml:space="preserve">
    <value>Object is not a array with the same number of elements as the array to compare it to.</value>
  </data>
  <data name="CannotFindOldValue" xml:space="preserve">
    <value>Cannot find the old value</value>
  </data>
  <data name="CapacityMustBeGreaterThanOrEqualToCount" xml:space="preserve">
    <value>Capacity was less than the current Count of elements.</value>
  </data>
  <data name="CapacityMustEqualCountOnMove" xml:space="preserve">
    <value>MoveToImmutable can only be performed when Count equals Capacity.</value>
  </data>
  <data name="CollectionModifiedDuringEnumeration" xml:space="preserve">
    <value>Collection was modified; enumeration operation may not execute.</value>
  </data>
  <data name="ConcurrentCollection_SyncRoot_NotSupported" xml:space="preserve">
    <value>The SyncRoot property may not be used for the synchronization of concurrent collections.</value>
  </data>
  <data name="DuplicateKey" xml:space="preserve">
    <value>An element with the same key but a different value already exists. Key: {0}</value>
  </data>
  <data name="event_DataflowBlockCompleted" xml:space="preserve">
    <value>Block {0} completed as {1}. {2}</value>
  </data>
  <data name="event_DataflowBlockCreated" xml:space="preserve">
    <value>Block of type {0} instantiated with Id {1}.</value>
  </data>
  <data name="event_DataflowBlockLinking" xml:space="preserve">
    <value>Source {0} linked to target {1}.</value>
  </data>
  <data name="event_DataflowBlockUnlinking" xml:space="preserve">
    <value>Source {0} unlinked from target {1}.</value>
  </data>
  <data name="event_TaskLaunchedForMessageHandling" xml:space="preserve">
    <value>{1} task launched from block {0} with {2} message(s) pending.</value>
  </data>
  <data name="InvalidEmptyOperation" xml:space="preserve">
    <value>This operation does not apply to an empty instance.</value>
  </data>
  <data name="InvalidOperationOnDefaultArray" xml:space="preserve">
    <value>This operation cannot be performed on a default instance of ImmutableArray&lt;T&gt;.  Consider initializing the array, or checking the ImmutableArray&lt;T&gt;.IsDefault property.</value>
  </data>
  <data name="InvalidOperation_DataNotAvailableForReceive" xml:space="preserve">
    <value>The source completed without providing data to receive.</value>
  </data>
  <data name="InvalidOperation_FailedToConsumeReservedMessage" xml:space="preserve">
    <value>The target block failed to consume a message it had successfully reserved.</value>
  </data>
  <data name="InvalidOperation_MessageNotReservedByTarget" xml:space="preserve">
    <value>The target does not have the message reserved.</value>
  </data>
  <data name="NotSupported_MemberNotNeeded" xml:space="preserve">
    <value>This member is not supported on this dataflow block. The block is intended for a specific purpose that does not utilize this member.</value>
  </data>
  <data name="BlockingCollection_Add_ConcurrentCompleteAdd" xml:space="preserve">
    <value>CompleteAdding may not be used concurrently with additions to the collection.</value>
  </data>
  <data name="BlockingCollection_Add_Failed" xml:space="preserve">
    <value>The underlying collection didn't accept the item.</value>
  </data>
  <data name="BlockingCollection_CantAddAnyWhenCompleted" xml:space="preserve">
    <value>At least one of the specified collections is marked as complete with regards to additions.</value>
  </data>
  <data name="BlockingCollection_CantTakeAnyWhenAllDone" xml:space="preserve">
    <value>All collections are marked as complete with regards to additions.</value>
  </data>
  <data name="BlockingCollection_CantTakeWhenDone" xml:space="preserve">
    <value>The collection argument is empty and has been marked as complete with regards to additions.</value>
  </data>
  <data name="BlockingCollection_Completed" xml:space="preserve">
    <value>The collection has been marked as complete with regards to additions.</value>
  </data>
  <data name="BlockingCollection_CopyTo_IncorrectType" xml:space="preserve">
    <value>The array argument is of the incorrect type.</value>
  </data>
  <data name="BlockingCollection_CopyTo_MultiDim" xml:space="preserve">
    <value>The array argument is multidimensional.</value>
  </data>
  <data name="BlockingCollection_CopyTo_NonNegative" xml:space="preserve">
    <value>The index argument must be greater than or equal zero.</value>
  </data>
  <data name="BlockingCollection_CopyTo_TooManyElems" xml:space="preserve">
    <value>The number of elements in the collection is greater than the available space from index to the end of the destination array.</value>
  </data>
  <data name="BlockingCollection_ctor_BoundedCapacityRange" xml:space="preserve">
    <value>The boundedCapacity argument must be positive.</value>
  </data>
  <data name="BlockingCollection_ctor_CountMoreThanCapacity" xml:space="preserve">
    <value>The collection argument contains more items than are allowed by the boundedCapacity.</value>
  </data>
  <data name="BlockingCollection_Disposed" xml:space="preserve">
    <value>The collection has been disposed.</value>
  </data>
  <data name="BlockingCollection_Take_CollectionModified" xml:space="preserve">
    <value>The underlying collection was modified from outside of the BlockingCollection&lt;T&gt;.</value>
  </data>
  <data name="BlockingCollection_TimeoutInvalid" xml:space="preserve">
    <value>The specified timeout must represent a value between -1 and {0}, inclusive.</value>
  </data>
  <data name="BlockingCollection_ValidateCollectionsArray_DispElems" xml:space="preserve">
    <value>The collections argument contains at least one disposed element.</value>
  </data>
  <data name="BlockingCollection_ValidateCollectionsArray_LargeSize" xml:space="preserve">
    <value>The collections length is greater than the supported range for 32 bit machine.</value>
  </data>
  <data name="BlockingCollection_ValidateCollectionsArray_NullElems" xml:space="preserve">
    <value>The collections argument contains at least one null element.</value>
  </data>
  <data name="BlockingCollection_ValidateCollectionsArray_ZeroSize" xml:space="preserve">
    <value>The collections argument is a zero-length array.</value>
  </data>
  <data name="Common_OperationCanceled" xml:space="preserve">
    <value>The operation was canceled.</value>
  </data>
  <data name="ConcurrentBag_CopyTo_ArgumentNullException" xml:space="preserve">
    <value>The array argument is null.</value>
  </data>
  <data name="ConcurrentBag_CopyTo_ArgumentOutOfRangeException" xml:space="preserve">
    <value>The index argument must be greater than or equal zero.</value>
  </data>
  <data name="ConcurrentBag_Ctor_ArgumentNullException" xml:space="preserve">
    <value>The collection argument is null.</value>
  </data>
  <data name="ConcurrentCollection_SyncRoot_NotSupported1" xml:space="preserve">
    <value>The SyncRoot property may not be used for the synchronization of concurrent collections.</value>
  </data>
  <data name="ConcurrentDictionary_ArrayIncorrectType" xml:space="preserve">
    <value>The array is multidimensional, or the type parameter for the set cannot be cast automatically to the type of the destination array.</value>
  </data>
  <data name="ConcurrentDictionary_ArrayNotLargeEnough" xml:space="preserve">
    <value>The index is equal to or greater than the length of the array, or the number of elements in the dictionary is greater than the available space from index to the end of the destination array.</value>
  </data>
  <data name="ConcurrentDictionary_CapacityMustNotBeNegative" xml:space="preserve">
    <value>The capacity argument must be greater than or equal to zero.</value>
  </data>
  <data name="ConcurrentDictionary_ConcurrencyLevelMustBePositive" xml:space="preserve">
    <value>The concurrencyLevel argument must be positive.</value>
  </data>
  <data name="ConcurrentDictionary_IndexIsNegative" xml:space="preserve">
    <value>The index argument is less than zero.</value>
  </data>
  <data name="ConcurrentDictionary_ItemKeyIsNull" xml:space="preserve">
    <value>TKey is a reference type and item.Key is null.</value>
  </data>
  <data name="ConcurrentDictionary_KeyAlreadyExisted" xml:space="preserve">
    <value>The key already existed in the dictionary.</value>
  </data>
  <data name="ConcurrentDictionary_SourceContainsDuplicateKeys" xml:space="preserve">
    <value>The source argument contains duplicate keys.</value>
  </data>
  <data name="ConcurrentDictionary_TypeOfKeyIncorrect" xml:space="preserve">
    <value>The key was of an incorrect type for this dictionary.</value>
  </data>
  <data name="ConcurrentDictionary_TypeOfValueIncorrect" xml:space="preserve">
    <value>The value was of an incorrect type for this dictionary.</value>
  </data>
  <data name="ConcurrentStack_PushPopRange_CountOutOfRange" xml:space="preserve">
    <value>The count argument must be greater than or equal to zero.</value>
  </data>
  <data name="ConcurrentStack_PushPopRange_InvalidCount" xml:space="preserve">
    <value>The sum of the startIndex and count arguments must be less than or equal to the collection's Count.</value>
  </data>
  <data name="ConcurrentStack_PushPopRange_StartOutOfRange" xml:space="preserve">
    <value>The startIndex argument must be greater than or equal to zero.</value>
  </data>
  <data name="PartitionerStatic_CanNotCallGetEnumeratorAfterSourceHasBeenDisposed" xml:space="preserve">
    <value>Can not call GetEnumerator on partitions after the source enumerable is disposed</value>
  </data>
  <data name="PartitionerStatic_CurrentCalledBeforeMoveNext" xml:space="preserve">
    <value>MoveNext must be called at least once before calling Current.</value>
  </data>
  <data name="Partitioner_DynamicPartitionsNotSupported" xml:space="preserve">
    <value>Dynamic partitions are not supported by this partitioner.</value>
  </data>
  <data name="ParallelState_Break_InvalidOperationException_BreakAfterStop" xml:space="preserve">
    <value>Break was called after Stop was called.</value>
  </data>
  <data name="ParallelState_NotSupportedException_UnsupportedMethod" xml:space="preserve">
    <value>This method is not supported.</value>
  </data>
  <data name="ParallelState_Stop_InvalidOperationException_StopAfterBreak" xml:space="preserve">
    <value>Stop was called after Break was called.</value>
  </data>
  <data name="Parallel_ForEach_NullEnumerator" xml:space="preserve">
    <value>The Partitioner source returned a null enumerator.</value>
  </data>
  <data name="Parallel_ForEach_OrderedPartitionerKeysNotNormalized" xml:space="preserve">
    <value>This method requires the use of an OrderedPartitioner with the KeysNormalized property set to true.</value>
  </data>
  <data name="Parallel_ForEach_PartitionerNotDynamic" xml:space="preserve">
    <value>The Partitioner used here must support dynamic partitioning.</value>
  </data>
  <data name="Parallel_ForEach_PartitionerReturnedNull" xml:space="preserve">
    <value>The Partitioner used here returned a null partitioner source.</value>
  </data>
  <data name="Parallel_Invoke_ActionNull" xml:space="preserve">
    <value>One of the actions was null.</value>
  </data>
  <data name="InvalidOperation_ErrorDuringCleanup" xml:space="preserve">
    <value>An error occurred while linking up the target or during the cleanup after completion.</value>
  </data>
</root>