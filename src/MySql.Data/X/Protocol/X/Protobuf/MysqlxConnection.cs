// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Mysqlx.Connection {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal static partial class MysqlxConnection {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Mysqlx_Connection_Capability__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Connection.Capability, global::Mysqlx.Connection.Capability.Builder> internal__static_Mysqlx_Connection_Capability__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Mysqlx_Connection_Capabilities__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Connection.Capabilities, global::Mysqlx.Connection.Capabilities.Builder> internal__static_Mysqlx_Connection_Capabilities__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Mysqlx_Connection_CapabilitiesGet__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Connection.CapabilitiesGet, global::Mysqlx.Connection.CapabilitiesGet.Builder> internal__static_Mysqlx_Connection_CapabilitiesGet__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Mysqlx_Connection_CapabilitiesSet__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Connection.CapabilitiesSet, global::Mysqlx.Connection.CapabilitiesSet.Builder> internal__static_Mysqlx_Connection_CapabilitiesSet__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Mysqlx_Connection_Close__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Connection.Close, global::Mysqlx.Connection.Close.Builder> internal__static_Mysqlx_Connection_Close__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static MysqlxConnection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdteXNxbHhfY29ubmVjdGlvbi5wcm90bxIRTXlzcWx4LkNvbm5lY3Rpb24a", 
            "Fm15c3FseF9kYXRhdHlwZXMucHJvdG8iQAoKQ2FwYWJpbGl0eRIMCgRuYW1l", 
            "GAEgAigJEiQKBXZhbHVlGAIgAigLMhUuTXlzcWx4LkRhdGF0eXBlcy5Bbnki", 
            "QwoMQ2FwYWJpbGl0aWVzEjMKDGNhcGFiaWxpdGllcxgBIAMoCzIdLk15c3Fs", 
            "eC5Db25uZWN0aW9uLkNhcGFiaWxpdHkiEQoPQ2FwYWJpbGl0aWVzR2V0IkgK", 
            "D0NhcGFiaWxpdGllc1NldBI1CgxjYXBhYmlsaXRpZXMYASACKAsyHy5NeXNx", 
            "bHguQ29ubmVjdGlvbi5DYXBhYmlsaXRpZXMiBwoFQ2xvc2VCHgocY29tLm15", 
          "c3FsLmNqLm15c3FseC5wcm90b2J1Zg=="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Mysqlx_Connection_Capability__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Mysqlx_Connection_Capability__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Connection.Capability, global::Mysqlx.Connection.Capability.Builder>(internal__static_Mysqlx_Connection_Capability__Descriptor,
                new string[] { "Name", "Value", });
        internal__static_Mysqlx_Connection_Capabilities__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Mysqlx_Connection_Capabilities__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Connection.Capabilities, global::Mysqlx.Connection.Capabilities.Builder>(internal__static_Mysqlx_Connection_Capabilities__Descriptor,
                new string[] { "Capabilities_", });
        internal__static_Mysqlx_Connection_CapabilitiesGet__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Mysqlx_Connection_CapabilitiesGet__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Connection.CapabilitiesGet, global::Mysqlx.Connection.CapabilitiesGet.Builder>(internal__static_Mysqlx_Connection_CapabilitiesGet__Descriptor,
                new string[] { });
        internal__static_Mysqlx_Connection_CapabilitiesSet__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Mysqlx_Connection_CapabilitiesSet__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Connection.CapabilitiesSet, global::Mysqlx.Connection.CapabilitiesSet.Builder>(internal__static_Mysqlx_Connection_CapabilitiesSet__Descriptor,
                new string[] { "Capabilities", });
        internal__static_Mysqlx_Connection_Close__Descriptor = Descriptor.MessageTypes[4];
        internal__static_Mysqlx_Connection_Close__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Connection.Close, global::Mysqlx.Connection.Close.Builder>(internal__static_Mysqlx_Connection_Close__Descriptor,
                new string[] { });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Mysqlx.Datatypes.MysqlxDatatypes.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class Capability : pb::GeneratedMessage<Capability, Capability.Builder> {
    private Capability() { }
    private static readonly Capability defaultInstance = new Capability().MakeReadOnly();
    private static readonly string[] _capabilityFieldNames = new string[] { "name", "value" };
    private static readonly uint[] _capabilityFieldTags = new uint[] { 10, 18 };
    public static Capability DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Capability DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Capability ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mysqlx.Connection.MysqlxConnection.internal__static_Mysqlx_Connection_Capability__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Capability, Capability.Builder> InternalFieldAccessors {
      get { return global::Mysqlx.Connection.MysqlxConnection.internal__static_Mysqlx_Connection_Capability__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int ValueFieldNumber = 2;
    private bool hasValue;
    private global::Mysqlx.Datatypes.Any value_;
    public bool HasValue {
      get { return hasValue; }
    }
    public global::Mysqlx.Datatypes.Any Value {
      get { return value_ ?? global::Mysqlx.Datatypes.Any.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        if (!hasValue) return false;
        if (!Value.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _capabilityFieldNames;
      if (hasName) {
        output.WriteString(1, field_names[0], Name);
      }
      if (hasValue) {
        output.WriteMessage(2, field_names[1], Value);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Name);
      }
      if (hasValue) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Value);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Capability ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Capability ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Capability ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Capability ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Capability ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Capability ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Capability ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Capability ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Capability ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Capability ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Capability MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Capability prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Capability, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Capability cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Capability result;
      
      private Capability PrepareBuilder() {
        if (resultIsReadOnly) {
          Capability original = result;
          result = new Capability();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Capability MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mysqlx.Connection.Capability.Descriptor; }
      }
      
      public override Capability DefaultInstanceForType {
        get { return global::Mysqlx.Connection.Capability.DefaultInstance; }
      }
      
      public override Capability BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Capability) {
          return MergeFrom((Capability) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Capability other) {
        if (other == global::Mysqlx.Connection.Capability.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasValue) {
          MergeValue(other.Value);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_capabilityFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _capabilityFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 18: {
              global::Mysqlx.Datatypes.Any.Builder subBuilder = global::Mysqlx.Datatypes.Any.CreateBuilder();
              if (result.hasValue) {
                subBuilder.MergeFrom(Value);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Value = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasValue {
       get { return result.hasValue; }
      }
      public global::Mysqlx.Datatypes.Any Value {
        get { return result.Value; }
        set { SetValue(value); }
      }
      public Builder SetValue(global::Mysqlx.Datatypes.Any value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasValue = true;
        result.value_ = value;
        return this;
      }
      public Builder SetValue(global::Mysqlx.Datatypes.Any.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasValue = true;
        result.value_ = builderForValue.Build();
        return this;
      }
      public Builder MergeValue(global::Mysqlx.Datatypes.Any value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasValue &&
            result.value_ != global::Mysqlx.Datatypes.Any.DefaultInstance) {
            result.value_ = global::Mysqlx.Datatypes.Any.CreateBuilder(result.value_).MergeFrom(value).BuildPartial();
        } else {
          result.value_ = value;
        }
        result.hasValue = true;
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.hasValue = false;
        result.value_ = null;
        return this;
      }
    }
    static Capability() {
      object.ReferenceEquals(global::Mysqlx.Connection.MysqlxConnection.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class Capabilities : pb::GeneratedMessage<Capabilities, Capabilities.Builder> {
    private Capabilities() { }
    private static readonly Capabilities defaultInstance = new Capabilities().MakeReadOnly();
    private static readonly string[] _capabilitiesFieldNames = new string[] { "capabilities" };
    private static readonly uint[] _capabilitiesFieldTags = new uint[] { 10 };
    public static Capabilities DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Capabilities DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Capabilities ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mysqlx.Connection.MysqlxConnection.internal__static_Mysqlx_Connection_Capabilities__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Capabilities, Capabilities.Builder> InternalFieldAccessors {
      get { return global::Mysqlx.Connection.MysqlxConnection.internal__static_Mysqlx_Connection_Capabilities__FieldAccessorTable; }
    }
    
    public const int Capabilities_FieldNumber = 1;
    private pbc::PopsicleList<global::Mysqlx.Connection.Capability> capabilities_ = new pbc::PopsicleList<global::Mysqlx.Connection.Capability>();
    public scg::IList<global::Mysqlx.Connection.Capability> Capabilities_List {
      get { return capabilities_; }
    }
    public int Capabilities_Count {
      get { return capabilities_.Count; }
    }
    public global::Mysqlx.Connection.Capability GetCapabilities_(int index) {
      return capabilities_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Mysqlx.Connection.Capability element in Capabilities_List) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _capabilitiesFieldNames;
      if (capabilities_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], capabilities_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::Mysqlx.Connection.Capability element in Capabilities_List) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Capabilities ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Capabilities ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Capabilities ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Capabilities ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Capabilities ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Capabilities ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Capabilities ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Capabilities ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Capabilities ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Capabilities ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Capabilities MakeReadOnly() {
      capabilities_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Capabilities prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Capabilities, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Capabilities cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Capabilities result;
      
      private Capabilities PrepareBuilder() {
        if (resultIsReadOnly) {
          Capabilities original = result;
          result = new Capabilities();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Capabilities MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mysqlx.Connection.Capabilities.Descriptor; }
      }
      
      public override Capabilities DefaultInstanceForType {
        get { return global::Mysqlx.Connection.Capabilities.DefaultInstance; }
      }
      
      public override Capabilities BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Capabilities) {
          return MergeFrom((Capabilities) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Capabilities other) {
        if (other == global::Mysqlx.Connection.Capabilities.DefaultInstance) return this;
        PrepareBuilder();
        if (other.capabilities_.Count != 0) {
          result.capabilities_.Add(other.capabilities_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_capabilitiesFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _capabilitiesFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.capabilities_, global::Mysqlx.Connection.Capability.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Mysqlx.Connection.Capability> Capabilities_List {
        get { return PrepareBuilder().capabilities_; }
      }
      public int Capabilities_Count {
        get { return result.Capabilities_Count; }
      }
      public global::Mysqlx.Connection.Capability GetCapabilities_(int index) {
        return result.GetCapabilities_(index);
      }
      public Builder SetCapabilities_(int index, global::Mysqlx.Connection.Capability value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.capabilities_[index] = value;
        return this;
      }
      public Builder SetCapabilities_(int index, global::Mysqlx.Connection.Capability.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.capabilities_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCapabilities_(global::Mysqlx.Connection.Capability value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.capabilities_.Add(value);
        return this;
      }
      public Builder AddCapabilities_(global::Mysqlx.Connection.Capability.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.capabilities_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCapabilities_(scg::IEnumerable<global::Mysqlx.Connection.Capability> values) {
        PrepareBuilder();
        result.capabilities_.Add(values);
        return this;
      }
      public Builder ClearCapabilities_() {
        PrepareBuilder();
        result.capabilities_.Clear();
        return this;
      }
    }
    static Capabilities() {
      object.ReferenceEquals(global::Mysqlx.Connection.MysqlxConnection.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class CapabilitiesGet : pb::GeneratedMessage<CapabilitiesGet, CapabilitiesGet.Builder> {
    private CapabilitiesGet() { }
    private static readonly CapabilitiesGet defaultInstance = new CapabilitiesGet().MakeReadOnly();
    private static readonly string[] _capabilitiesGetFieldNames = new string[] {  };
    private static readonly uint[] _capabilitiesGetFieldTags = new uint[] {  };
    public static CapabilitiesGet DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CapabilitiesGet DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CapabilitiesGet ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mysqlx.Connection.MysqlxConnection.internal__static_Mysqlx_Connection_CapabilitiesGet__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CapabilitiesGet, CapabilitiesGet.Builder> InternalFieldAccessors {
      get { return global::Mysqlx.Connection.MysqlxConnection.internal__static_Mysqlx_Connection_CapabilitiesGet__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _capabilitiesGetFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static CapabilitiesGet ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CapabilitiesGet ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CapabilitiesGet ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CapabilitiesGet ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CapabilitiesGet ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CapabilitiesGet ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CapabilitiesGet ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CapabilitiesGet ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CapabilitiesGet ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CapabilitiesGet ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CapabilitiesGet MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CapabilitiesGet prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CapabilitiesGet, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CapabilitiesGet cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CapabilitiesGet result;
      
      private CapabilitiesGet PrepareBuilder() {
        if (resultIsReadOnly) {
          CapabilitiesGet original = result;
          result = new CapabilitiesGet();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CapabilitiesGet MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mysqlx.Connection.CapabilitiesGet.Descriptor; }
      }
      
      public override CapabilitiesGet DefaultInstanceForType {
        get { return global::Mysqlx.Connection.CapabilitiesGet.DefaultInstance; }
      }
      
      public override CapabilitiesGet BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CapabilitiesGet) {
          return MergeFrom((CapabilitiesGet) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CapabilitiesGet other) {
        if (other == global::Mysqlx.Connection.CapabilitiesGet.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_capabilitiesGetFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _capabilitiesGetFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static CapabilitiesGet() {
      object.ReferenceEquals(global::Mysqlx.Connection.MysqlxConnection.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class CapabilitiesSet : pb::GeneratedMessage<CapabilitiesSet, CapabilitiesSet.Builder> {
    private CapabilitiesSet() { }
    private static readonly CapabilitiesSet defaultInstance = new CapabilitiesSet().MakeReadOnly();
    private static readonly string[] _capabilitiesSetFieldNames = new string[] { "capabilities" };
    private static readonly uint[] _capabilitiesSetFieldTags = new uint[] { 10 };
    public static CapabilitiesSet DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CapabilitiesSet DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CapabilitiesSet ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mysqlx.Connection.MysqlxConnection.internal__static_Mysqlx_Connection_CapabilitiesSet__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CapabilitiesSet, CapabilitiesSet.Builder> InternalFieldAccessors {
      get { return global::Mysqlx.Connection.MysqlxConnection.internal__static_Mysqlx_Connection_CapabilitiesSet__FieldAccessorTable; }
    }
    
    public const int CapabilitiesFieldNumber = 1;
    private bool hasCapabilities;
    private global::Mysqlx.Connection.Capabilities capabilities_;
    public bool HasCapabilities {
      get { return hasCapabilities; }
    }
    public global::Mysqlx.Connection.Capabilities Capabilities {
      get { return capabilities_ ?? global::Mysqlx.Connection.Capabilities.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCapabilities) return false;
        if (!Capabilities.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _capabilitiesSetFieldNames;
      if (hasCapabilities) {
        output.WriteMessage(1, field_names[0], Capabilities);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCapabilities) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Capabilities);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static CapabilitiesSet ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CapabilitiesSet ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CapabilitiesSet ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CapabilitiesSet ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CapabilitiesSet ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CapabilitiesSet ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CapabilitiesSet ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CapabilitiesSet ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CapabilitiesSet ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CapabilitiesSet ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CapabilitiesSet MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CapabilitiesSet prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CapabilitiesSet, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CapabilitiesSet cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CapabilitiesSet result;
      
      private CapabilitiesSet PrepareBuilder() {
        if (resultIsReadOnly) {
          CapabilitiesSet original = result;
          result = new CapabilitiesSet();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CapabilitiesSet MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mysqlx.Connection.CapabilitiesSet.Descriptor; }
      }
      
      public override CapabilitiesSet DefaultInstanceForType {
        get { return global::Mysqlx.Connection.CapabilitiesSet.DefaultInstance; }
      }
      
      public override CapabilitiesSet BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CapabilitiesSet) {
          return MergeFrom((CapabilitiesSet) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CapabilitiesSet other) {
        if (other == global::Mysqlx.Connection.CapabilitiesSet.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCapabilities) {
          MergeCapabilities(other.Capabilities);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_capabilitiesSetFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _capabilitiesSetFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Mysqlx.Connection.Capabilities.Builder subBuilder = global::Mysqlx.Connection.Capabilities.CreateBuilder();
              if (result.hasCapabilities) {
                subBuilder.MergeFrom(Capabilities);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Capabilities = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCapabilities {
       get { return result.hasCapabilities; }
      }
      public global::Mysqlx.Connection.Capabilities Capabilities {
        get { return result.Capabilities; }
        set { SetCapabilities(value); }
      }
      public Builder SetCapabilities(global::Mysqlx.Connection.Capabilities value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCapabilities = true;
        result.capabilities_ = value;
        return this;
      }
      public Builder SetCapabilities(global::Mysqlx.Connection.Capabilities.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCapabilities = true;
        result.capabilities_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCapabilities(global::Mysqlx.Connection.Capabilities value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCapabilities &&
            result.capabilities_ != global::Mysqlx.Connection.Capabilities.DefaultInstance) {
            result.capabilities_ = global::Mysqlx.Connection.Capabilities.CreateBuilder(result.capabilities_).MergeFrom(value).BuildPartial();
        } else {
          result.capabilities_ = value;
        }
        result.hasCapabilities = true;
        return this;
      }
      public Builder ClearCapabilities() {
        PrepareBuilder();
        result.hasCapabilities = false;
        result.capabilities_ = null;
        return this;
      }
    }
    static CapabilitiesSet() {
      object.ReferenceEquals(global::Mysqlx.Connection.MysqlxConnection.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class Close : pb::GeneratedMessage<Close, Close.Builder> {
    private Close() { }
    private static readonly Close defaultInstance = new Close().MakeReadOnly();
    private static readonly string[] _closeFieldNames = new string[] {  };
    private static readonly uint[] _closeFieldTags = new uint[] {  };
    public static Close DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Close DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Close ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mysqlx.Connection.MysqlxConnection.internal__static_Mysqlx_Connection_Close__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Close, Close.Builder> InternalFieldAccessors {
      get { return global::Mysqlx.Connection.MysqlxConnection.internal__static_Mysqlx_Connection_Close__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _closeFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Close ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Close ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Close ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Close ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Close ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Close ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Close ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Close ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Close ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Close ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Close MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Close prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Close, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Close cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Close result;
      
      private Close PrepareBuilder() {
        if (resultIsReadOnly) {
          Close original = result;
          result = new Close();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Close MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mysqlx.Connection.Close.Descriptor; }
      }
      
      public override Close DefaultInstanceForType {
        get { return global::Mysqlx.Connection.Close.DefaultInstance; }
      }
      
      public override Close BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Close) {
          return MergeFrom((Close) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Close other) {
        if (other == global::Mysqlx.Connection.Close.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_closeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _closeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static Close() {
      object.ReferenceEquals(global::Mysqlx.Connection.MysqlxConnection.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
