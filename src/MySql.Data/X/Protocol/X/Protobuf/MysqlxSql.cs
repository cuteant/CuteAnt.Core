// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Mysqlx.Sql {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal static partial class MysqlxSql {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Mysqlx_Sql_StmtExecute__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Sql.StmtExecute, global::Mysqlx.Sql.StmtExecute.Builder> internal__static_Mysqlx_Sql_StmtExecute__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Mysqlx_Sql_StmtExecuteOk__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Sql.StmtExecuteOk, global::Mysqlx.Sql.StmtExecuteOk.Builder> internal__static_Mysqlx_Sql_StmtExecuteOk__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static MysqlxSql() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBteXNxbHhfc3FsLnByb3RvEgpNeXNxbHguU3FsGhZteXNxbHhfZGF0YXR5", 
            "cGVzLnByb3RvInkKC1N0bXRFeGVjdXRlEhYKCW5hbWVzcGFjZRgDIAEoCToD", 
            "c3FsEgwKBHN0bXQYASACKAwSIwoEYXJncxgCIAMoCzIVLk15c3FseC5EYXRh", 
            "dHlwZXMuQW55Eh8KEGNvbXBhY3RfbWV0YWRhdGEYBCABKAg6BWZhbHNlIg8K", 
            "DVN0bXRFeGVjdXRlT2tCHgocY29tLm15c3FsLmNqLm15c3FseC5wcm90b2J1", 
          "Zg=="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Mysqlx_Sql_StmtExecute__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Mysqlx_Sql_StmtExecute__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Sql.StmtExecute, global::Mysqlx.Sql.StmtExecute.Builder>(internal__static_Mysqlx_Sql_StmtExecute__Descriptor,
                new string[] { "Namespace", "Stmt", "Args", "CompactMetadata", });
        internal__static_Mysqlx_Sql_StmtExecuteOk__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Mysqlx_Sql_StmtExecuteOk__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Sql.StmtExecuteOk, global::Mysqlx.Sql.StmtExecuteOk.Builder>(internal__static_Mysqlx_Sql_StmtExecuteOk__Descriptor,
                new string[] { });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Mysqlx.Datatypes.MysqlxDatatypes.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class StmtExecute : pb::GeneratedMessage<StmtExecute, StmtExecute.Builder> {
    private StmtExecute() { }
    private static readonly StmtExecute defaultInstance = new StmtExecute().MakeReadOnly();
    private static readonly string[] _stmtExecuteFieldNames = new string[] { "args", "compact_metadata", "namespace", "stmt" };
    private static readonly uint[] _stmtExecuteFieldTags = new uint[] { 18, 32, 26, 10 };
    public static StmtExecute DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StmtExecute DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StmtExecute ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mysqlx.Sql.MysqlxSql.internal__static_Mysqlx_Sql_StmtExecute__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StmtExecute, StmtExecute.Builder> InternalFieldAccessors {
      get { return global::Mysqlx.Sql.MysqlxSql.internal__static_Mysqlx_Sql_StmtExecute__FieldAccessorTable; }
    }
    
    public const int NamespaceFieldNumber = 3;
    private bool hasNamespace;
    private string namespace_ = "sql";
    public bool HasNamespace {
      get { return hasNamespace; }
    }
    public string Namespace {
      get { return namespace_; }
    }
    
    public const int StmtFieldNumber = 1;
    private bool hasStmt;
    private pb::ByteString stmt_ = pb::ByteString.Empty;
    public bool HasStmt {
      get { return hasStmt; }
    }
    public pb::ByteString Stmt {
      get { return stmt_; }
    }
    
    public const int ArgsFieldNumber = 2;
    private pbc::PopsicleList<global::Mysqlx.Datatypes.Any> args_ = new pbc::PopsicleList<global::Mysqlx.Datatypes.Any>();
    public scg::IList<global::Mysqlx.Datatypes.Any> ArgsList {
      get { return args_; }
    }
    public int ArgsCount {
      get { return args_.Count; }
    }
    public global::Mysqlx.Datatypes.Any GetArgs(int index) {
      return args_[index];
    }
    
    public const int CompactMetadataFieldNumber = 4;
    private bool hasCompactMetadata;
    private bool compactMetadata_;
    public bool HasCompactMetadata {
      get { return hasCompactMetadata; }
    }
    public bool CompactMetadata {
      get { return compactMetadata_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasStmt) return false;
        foreach (global::Mysqlx.Datatypes.Any element in ArgsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _stmtExecuteFieldNames;
      if (hasStmt) {
        output.WriteBytes(1, field_names[3], Stmt);
      }
      if (args_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], args_);
      }
      if (hasNamespace) {
        output.WriteString(3, field_names[2], Namespace);
      }
      if (hasCompactMetadata) {
        output.WriteBool(4, field_names[1], CompactMetadata);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasNamespace) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Namespace);
      }
      if (hasStmt) {
        size += pb::CodedOutputStream.ComputeBytesSize(1, Stmt);
      }
      foreach (global::Mysqlx.Datatypes.Any element in ArgsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      if (hasCompactMetadata) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, CompactMetadata);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static StmtExecute ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StmtExecute ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StmtExecute ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StmtExecute ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StmtExecute ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StmtExecute ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StmtExecute ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StmtExecute ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StmtExecute ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StmtExecute ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StmtExecute MakeReadOnly() {
      args_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StmtExecute prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<StmtExecute, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StmtExecute cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StmtExecute result;
      
      private StmtExecute PrepareBuilder() {
        if (resultIsReadOnly) {
          StmtExecute original = result;
          result = new StmtExecute();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StmtExecute MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mysqlx.Sql.StmtExecute.Descriptor; }
      }
      
      public override StmtExecute DefaultInstanceForType {
        get { return global::Mysqlx.Sql.StmtExecute.DefaultInstance; }
      }
      
      public override StmtExecute BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StmtExecute) {
          return MergeFrom((StmtExecute) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StmtExecute other) {
        if (other == global::Mysqlx.Sql.StmtExecute.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasNamespace) {
          Namespace = other.Namespace;
        }
        if (other.HasStmt) {
          Stmt = other.Stmt;
        }
        if (other.args_.Count != 0) {
          result.args_.Add(other.args_);
        }
        if (other.HasCompactMetadata) {
          CompactMetadata = other.CompactMetadata;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_stmtExecuteFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _stmtExecuteFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasStmt = input.ReadBytes(ref result.stmt_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.args_, global::Mysqlx.Datatypes.Any.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              result.hasNamespace = input.ReadString(ref result.namespace_);
              break;
            }
            case 32: {
              result.hasCompactMetadata = input.ReadBool(ref result.compactMetadata_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasNamespace {
        get { return result.hasNamespace; }
      }
      public string Namespace {
        get { return result.Namespace; }
        set { SetNamespace(value); }
      }
      public Builder SetNamespace(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNamespace = true;
        result.namespace_ = value;
        return this;
      }
      public Builder ClearNamespace() {
        PrepareBuilder();
        result.hasNamespace = false;
        result.namespace_ = "sql";
        return this;
      }
      
      public bool HasStmt {
        get { return result.hasStmt; }
      }
      public pb::ByteString Stmt {
        get { return result.Stmt; }
        set { SetStmt(value); }
      }
      public Builder SetStmt(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStmt = true;
        result.stmt_ = value;
        return this;
      }
      public Builder ClearStmt() {
        PrepareBuilder();
        result.hasStmt = false;
        result.stmt_ = pb::ByteString.Empty;
        return this;
      }
      
      public pbc::IPopsicleList<global::Mysqlx.Datatypes.Any> ArgsList {
        get { return PrepareBuilder().args_; }
      }
      public int ArgsCount {
        get { return result.ArgsCount; }
      }
      public global::Mysqlx.Datatypes.Any GetArgs(int index) {
        return result.GetArgs(index);
      }
      public Builder SetArgs(int index, global::Mysqlx.Datatypes.Any value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.args_[index] = value;
        return this;
      }
      public Builder SetArgs(int index, global::Mysqlx.Datatypes.Any.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.args_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddArgs(global::Mysqlx.Datatypes.Any value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.args_.Add(value);
        return this;
      }
      public Builder AddArgs(global::Mysqlx.Datatypes.Any.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.args_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeArgs(scg::IEnumerable<global::Mysqlx.Datatypes.Any> values) {
        PrepareBuilder();
        result.args_.Add(values);
        return this;
      }
      public Builder ClearArgs() {
        PrepareBuilder();
        result.args_.Clear();
        return this;
      }
      
      public bool HasCompactMetadata {
        get { return result.hasCompactMetadata; }
      }
      public bool CompactMetadata {
        get { return result.CompactMetadata; }
        set { SetCompactMetadata(value); }
      }
      public Builder SetCompactMetadata(bool value) {
        PrepareBuilder();
        result.hasCompactMetadata = true;
        result.compactMetadata_ = value;
        return this;
      }
      public Builder ClearCompactMetadata() {
        PrepareBuilder();
        result.hasCompactMetadata = false;
        result.compactMetadata_ = false;
        return this;
      }
    }
    static StmtExecute() {
      object.ReferenceEquals(global::Mysqlx.Sql.MysqlxSql.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class StmtExecuteOk : pb::GeneratedMessage<StmtExecuteOk, StmtExecuteOk.Builder> {
    private StmtExecuteOk() { }
    private static readonly StmtExecuteOk defaultInstance = new StmtExecuteOk().MakeReadOnly();
    private static readonly string[] _stmtExecuteOkFieldNames = new string[] {  };
    private static readonly uint[] _stmtExecuteOkFieldTags = new uint[] {  };
    public static StmtExecuteOk DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StmtExecuteOk DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StmtExecuteOk ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mysqlx.Sql.MysqlxSql.internal__static_Mysqlx_Sql_StmtExecuteOk__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StmtExecuteOk, StmtExecuteOk.Builder> InternalFieldAccessors {
      get { return global::Mysqlx.Sql.MysqlxSql.internal__static_Mysqlx_Sql_StmtExecuteOk__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _stmtExecuteOkFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static StmtExecuteOk ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StmtExecuteOk ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StmtExecuteOk ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StmtExecuteOk ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StmtExecuteOk ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StmtExecuteOk ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StmtExecuteOk ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StmtExecuteOk ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StmtExecuteOk ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StmtExecuteOk ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StmtExecuteOk MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StmtExecuteOk prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<StmtExecuteOk, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StmtExecuteOk cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StmtExecuteOk result;
      
      private StmtExecuteOk PrepareBuilder() {
        if (resultIsReadOnly) {
          StmtExecuteOk original = result;
          result = new StmtExecuteOk();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StmtExecuteOk MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mysqlx.Sql.StmtExecuteOk.Descriptor; }
      }
      
      public override StmtExecuteOk DefaultInstanceForType {
        get { return global::Mysqlx.Sql.StmtExecuteOk.DefaultInstance; }
      }
      
      public override StmtExecuteOk BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StmtExecuteOk) {
          return MergeFrom((StmtExecuteOk) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StmtExecuteOk other) {
        if (other == global::Mysqlx.Sql.StmtExecuteOk.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_stmtExecuteOkFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _stmtExecuteOkFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static StmtExecuteOk() {
      object.ReferenceEquals(global::Mysqlx.Sql.MysqlxSql.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
