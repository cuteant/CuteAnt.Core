// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Mysqlx.Datatypes {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal static partial class MysqlxDatatypes {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Mysqlx_Datatypes_Scalar__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Datatypes.Scalar, global::Mysqlx.Datatypes.Scalar.Builder> internal__static_Mysqlx_Datatypes_Scalar__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Mysqlx_Datatypes_Scalar_String__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Datatypes.Scalar.Types.String, global::Mysqlx.Datatypes.Scalar.Types.String.Builder> internal__static_Mysqlx_Datatypes_Scalar_String__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Mysqlx_Datatypes_Object__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Datatypes.Object, global::Mysqlx.Datatypes.Object.Builder> internal__static_Mysqlx_Datatypes_Object__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Mysqlx_Datatypes_Object_ObjectField__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Datatypes.Object.Types.ObjectField, global::Mysqlx.Datatypes.Object.Types.ObjectField.Builder> internal__static_Mysqlx_Datatypes_Object_ObjectField__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Mysqlx_Datatypes_Array__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Datatypes.Array, global::Mysqlx.Datatypes.Array.Builder> internal__static_Mysqlx_Datatypes_Array__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Mysqlx_Datatypes_Any__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Datatypes.Any, global::Mysqlx.Datatypes.Any.Builder> internal__static_Mysqlx_Datatypes_Any__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static MysqlxDatatypes() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZteXNxbHhfZGF0YXR5cGVzLnByb3RvEhBNeXNxbHguRGF0YXR5cGVzIvYC", 
            "CgZTY2FsYXISKwoEdHlwZRgBIAIoDjIdLk15c3FseC5EYXRhdHlwZXMuU2Nh", 
            "bGFyLlR5cGUSFAoMdl9zaWduZWRfaW50GAIgASgSEhYKDnZfdW5zaWduZWRf", 
            "aW50GAMgASgEEhAKCHZfb3BhcXVlGAUgASgMEhAKCHZfZG91YmxlGAYgASgB", 
            "Eg8KB3ZfZmxvYXQYByABKAISDgoGdl9ib29sGAggASgIEjEKCHZfc3RyaW5n", 
            "GAkgASgLMh8uTXlzcWx4LkRhdGF0eXBlcy5TY2FsYXIuU3RyaW5nGioKBlN0", 
            "cmluZxINCgV2YWx1ZRgBIAIoDBIRCgljb2xsYXRpb24YAiABKAQibQoEVHlw", 
            "ZRIKCgZWX1NJTlQQARIKCgZWX1VJTlQQAhIKCgZWX05VTEwQAxIMCghWX09D", 
            "VEVUUxAEEgwKCFZfRE9VQkxFEAUSCwoHVl9GTE9BVBAGEgoKBlZfQk9PTBAH", 
            "EgwKCFZfU1RSSU5HEAgifQoGT2JqZWN0EjEKA2ZsZBgBIAMoCzIkLk15c3Fs", 
            "eC5EYXRhdHlwZXMuT2JqZWN0Lk9iamVjdEZpZWxkGkAKC09iamVjdEZpZWxk", 
            "EgsKA2tleRgBIAIoCRIkCgV2YWx1ZRgCIAIoCzIVLk15c3FseC5EYXRhdHlw", 
            "ZXMuQW55Ii0KBUFycmF5EiQKBXZhbHVlGAEgAygLMhUuTXlzcWx4LkRhdGF0", 
            "eXBlcy5Bbnki0wEKA0FueRIoCgR0eXBlGAEgAigOMhouTXlzcWx4LkRhdGF0", 
            "eXBlcy5BbnkuVHlwZRIoCgZzY2FsYXIYAiABKAsyGC5NeXNxbHguRGF0YXR5", 
            "cGVzLlNjYWxhchIlCgNvYmoYAyABKAsyGC5NeXNxbHguRGF0YXR5cGVzLk9i", 
            "amVjdBImCgVhcnJheRgEIAEoCzIXLk15c3FseC5EYXRhdHlwZXMuQXJyYXki", 
            "KQoEVHlwZRIKCgZTQ0FMQVIQARIKCgZPQkpFQ1QQAhIJCgVBUlJBWRADQh4K", 
          "HGNvbS5teXNxbC5jai5teXNxbHgucHJvdG9idWY="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Mysqlx_Datatypes_Scalar__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Mysqlx_Datatypes_Scalar__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Datatypes.Scalar, global::Mysqlx.Datatypes.Scalar.Builder>(internal__static_Mysqlx_Datatypes_Scalar__Descriptor,
                new string[] { "Type", "VSignedInt", "VUnsignedInt", "VOpaque", "VDouble", "VFloat", "VBool", "VString", });
        internal__static_Mysqlx_Datatypes_Scalar_String__Descriptor = internal__static_Mysqlx_Datatypes_Scalar__Descriptor.NestedTypes[0];
        internal__static_Mysqlx_Datatypes_Scalar_String__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Datatypes.Scalar.Types.String, global::Mysqlx.Datatypes.Scalar.Types.String.Builder>(internal__static_Mysqlx_Datatypes_Scalar_String__Descriptor,
                new string[] { "Value", "Collation", });
        internal__static_Mysqlx_Datatypes_Object__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Mysqlx_Datatypes_Object__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Datatypes.Object, global::Mysqlx.Datatypes.Object.Builder>(internal__static_Mysqlx_Datatypes_Object__Descriptor,
                new string[] { "Fld", });
        internal__static_Mysqlx_Datatypes_Object_ObjectField__Descriptor = internal__static_Mysqlx_Datatypes_Object__Descriptor.NestedTypes[0];
        internal__static_Mysqlx_Datatypes_Object_ObjectField__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Datatypes.Object.Types.ObjectField, global::Mysqlx.Datatypes.Object.Types.ObjectField.Builder>(internal__static_Mysqlx_Datatypes_Object_ObjectField__Descriptor,
                new string[] { "Key", "Value", });
        internal__static_Mysqlx_Datatypes_Array__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Mysqlx_Datatypes_Array__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Datatypes.Array, global::Mysqlx.Datatypes.Array.Builder>(internal__static_Mysqlx_Datatypes_Array__Descriptor,
                new string[] { "Value", });
        internal__static_Mysqlx_Datatypes_Any__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Mysqlx_Datatypes_Any__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Datatypes.Any, global::Mysqlx.Datatypes.Any.Builder>(internal__static_Mysqlx_Datatypes_Any__Descriptor,
                new string[] { "Type", "Scalar", "Obj", "Array", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class Scalar : pb::GeneratedMessage<Scalar, Scalar.Builder> {
    private Scalar() { }
    private static readonly Scalar defaultInstance = new Scalar().MakeReadOnly();
    private static readonly string[] _scalarFieldNames = new string[] { "type", "v_bool", "v_double", "v_float", "v_opaque", "v_signed_int", "v_string", "v_unsigned_int" };
    private static readonly uint[] _scalarFieldTags = new uint[] { 8, 64, 49, 61, 42, 16, 74, 24 };
    public static Scalar DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Scalar DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Scalar ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mysqlx.Datatypes.MysqlxDatatypes.internal__static_Mysqlx_Datatypes_Scalar__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Scalar, Scalar.Builder> InternalFieldAccessors {
      get { return global::Mysqlx.Datatypes.MysqlxDatatypes.internal__static_Mysqlx_Datatypes_Scalar__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Type {
        V_SINT = 1,
        V_UINT = 2,
        V_NULL = 3,
        V_OCTETS = 4,
        V_DOUBLE = 5,
        V_FLOAT = 6,
        V_BOOL = 7,
        V_STRING = 8,
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class String : pb::GeneratedMessage<String, String.Builder> {
        private String() { }
        private static readonly String defaultInstance = new String().MakeReadOnly();
        private static readonly string[] _stringFieldNames = new string[] { "collation", "value" };
        private static readonly uint[] _stringFieldTags = new uint[] { 16, 10 };
        public static String DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override String DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override String ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Mysqlx.Datatypes.MysqlxDatatypes.internal__static_Mysqlx_Datatypes_Scalar_String__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<String, String.Builder> InternalFieldAccessors {
          get { return global::Mysqlx.Datatypes.MysqlxDatatypes.internal__static_Mysqlx_Datatypes_Scalar_String__FieldAccessorTable; }
        }
        
        public const int ValueFieldNumber = 1;
        private bool hasValue;
        private pb::ByteString value_ = pb::ByteString.Empty;
        public bool HasValue {
          get { return hasValue; }
        }
        public pb::ByteString Value {
          get { return value_; }
        }
        
        public const int CollationFieldNumber = 2;
        private bool hasCollation;
        private ulong collation_;
        public bool HasCollation {
          get { return hasCollation; }
        }
        [global::System.CLSCompliant(false)]
        public ulong Collation {
          get { return collation_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasValue) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _stringFieldNames;
          if (hasValue) {
            output.WriteBytes(1, field_names[1], Value);
          }
          if (hasCollation) {
            output.WriteUInt64(2, field_names[0], Collation);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }
        
        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          if (hasValue) {
            size += pb::CodedOutputStream.ComputeBytesSize(1, Value);
          }
          if (hasCollation) {
            size += pb::CodedOutputStream.ComputeUInt64Size(2, Collation);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static String ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static String ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static String ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static String ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static String ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static String ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static String ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static String ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static String ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static String ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private String MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(String prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<String, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(String cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private String result;
          
          private String PrepareBuilder() {
            if (resultIsReadOnly) {
              String original = result;
              result = new String();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override String MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Mysqlx.Datatypes.Scalar.Types.String.Descriptor; }
          }
          
          public override String DefaultInstanceForType {
            get { return global::Mysqlx.Datatypes.Scalar.Types.String.DefaultInstance; }
          }
          
          public override String BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is String) {
              return MergeFrom((String) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(String other) {
            if (other == global::Mysqlx.Datatypes.Scalar.Types.String.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasValue) {
              Value = other.Value;
            }
            if (other.HasCollation) {
              Collation = other.Collation;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_stringFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _stringFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasValue = input.ReadBytes(ref result.value_);
                  break;
                }
                case 16: {
                  result.hasCollation = input.ReadUInt64(ref result.collation_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasValue {
            get { return result.hasValue; }
          }
          public pb::ByteString Value {
            get { return result.Value; }
            set { SetValue(value); }
          }
          public Builder SetValue(pb::ByteString value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasValue = true;
            result.value_ = value;
            return this;
          }
          public Builder ClearValue() {
            PrepareBuilder();
            result.hasValue = false;
            result.value_ = pb::ByteString.Empty;
            return this;
          }
          
          public bool HasCollation {
            get { return result.hasCollation; }
          }
          [global::System.CLSCompliant(false)]
          public ulong Collation {
            get { return result.Collation; }
            set { SetCollation(value); }
          }
          [global::System.CLSCompliant(false)]
          public Builder SetCollation(ulong value) {
            PrepareBuilder();
            result.hasCollation = true;
            result.collation_ = value;
            return this;
          }
          public Builder ClearCollation() {
            PrepareBuilder();
            result.hasCollation = false;
            result.collation_ = 0UL;
            return this;
          }
        }
        static String() {
          object.ReferenceEquals(global::Mysqlx.Datatypes.MysqlxDatatypes.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private global::Mysqlx.Datatypes.Scalar.Types.Type type_ = global::Mysqlx.Datatypes.Scalar.Types.Type.V_SINT;
    public bool HasType {
      get { return hasType; }
    }
    public global::Mysqlx.Datatypes.Scalar.Types.Type Type {
      get { return type_; }
    }
    
    public const int VSignedIntFieldNumber = 2;
    private bool hasVSignedInt;
    private long vSignedInt_;
    public bool HasVSignedInt {
      get { return hasVSignedInt; }
    }
    public long VSignedInt {
      get { return vSignedInt_; }
    }
    
    public const int VUnsignedIntFieldNumber = 3;
    private bool hasVUnsignedInt;
    private ulong vUnsignedInt_;
    public bool HasVUnsignedInt {
      get { return hasVUnsignedInt; }
    }
    [global::System.CLSCompliant(false)]
    public ulong VUnsignedInt {
      get { return vUnsignedInt_; }
    }
    
    public const int VOpaqueFieldNumber = 5;
    private bool hasVOpaque;
    private pb::ByteString vOpaque_ = pb::ByteString.Empty;
    public bool HasVOpaque {
      get { return hasVOpaque; }
    }
    public pb::ByteString VOpaque {
      get { return vOpaque_; }
    }
    
    public const int VDoubleFieldNumber = 6;
    private bool hasVDouble;
    private double vDouble_;
    public bool HasVDouble {
      get { return hasVDouble; }
    }
    public double VDouble {
      get { return vDouble_; }
    }
    
    public const int VFloatFieldNumber = 7;
    private bool hasVFloat;
    private float vFloat_;
    public bool HasVFloat {
      get { return hasVFloat; }
    }
    public float VFloat {
      get { return vFloat_; }
    }
    
    public const int VBoolFieldNumber = 8;
    private bool hasVBool;
    private bool vBool_;
    public bool HasVBool {
      get { return hasVBool; }
    }
    public bool VBool {
      get { return vBool_; }
    }
    
    public const int VStringFieldNumber = 9;
    private bool hasVString;
    private global::Mysqlx.Datatypes.Scalar.Types.String vString_;
    public bool HasVString {
      get { return hasVString; }
    }
    public global::Mysqlx.Datatypes.Scalar.Types.String VString {
      get { return vString_ ?? global::Mysqlx.Datatypes.Scalar.Types.String.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        if (HasVString) {
          if (!VString.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _scalarFieldNames;
      if (hasType) {
        output.WriteEnum(1, field_names[0], (int) Type, Type);
      }
      if (hasVSignedInt) {
        output.WriteSInt64(2, field_names[5], VSignedInt);
      }
      if (hasVUnsignedInt) {
        output.WriteUInt64(3, field_names[7], VUnsignedInt);
      }
      if (hasVOpaque) {
        output.WriteBytes(5, field_names[4], VOpaque);
      }
      if (hasVDouble) {
        output.WriteDouble(6, field_names[2], VDouble);
      }
      if (hasVFloat) {
        output.WriteFloat(7, field_names[3], VFloat);
      }
      if (hasVBool) {
        output.WriteBool(8, field_names[1], VBool);
      }
      if (hasVString) {
        output.WriteMessage(9, field_names[6], VString);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasType) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
      }
      if (hasVSignedInt) {
        size += pb::CodedOutputStream.ComputeSInt64Size(2, VSignedInt);
      }
      if (hasVUnsignedInt) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, VUnsignedInt);
      }
      if (hasVOpaque) {
        size += pb::CodedOutputStream.ComputeBytesSize(5, VOpaque);
      }
      if (hasVDouble) {
        size += pb::CodedOutputStream.ComputeDoubleSize(6, VDouble);
      }
      if (hasVFloat) {
        size += pb::CodedOutputStream.ComputeFloatSize(7, VFloat);
      }
      if (hasVBool) {
        size += pb::CodedOutputStream.ComputeBoolSize(8, VBool);
      }
      if (hasVString) {
        size += pb::CodedOutputStream.ComputeMessageSize(9, VString);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Scalar ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Scalar ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Scalar ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Scalar ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Scalar ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Scalar ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Scalar ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Scalar ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Scalar ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Scalar ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Scalar MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Scalar prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Scalar, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Scalar cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Scalar result;
      
      private Scalar PrepareBuilder() {
        if (resultIsReadOnly) {
          Scalar original = result;
          result = new Scalar();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Scalar MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mysqlx.Datatypes.Scalar.Descriptor; }
      }
      
      public override Scalar DefaultInstanceForType {
        get { return global::Mysqlx.Datatypes.Scalar.DefaultInstance; }
      }
      
      public override Scalar BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Scalar) {
          return MergeFrom((Scalar) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Scalar other) {
        if (other == global::Mysqlx.Datatypes.Scalar.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasVSignedInt) {
          VSignedInt = other.VSignedInt;
        }
        if (other.HasVUnsignedInt) {
          VUnsignedInt = other.VUnsignedInt;
        }
        if (other.HasVOpaque) {
          VOpaque = other.VOpaque;
        }
        if (other.HasVDouble) {
          VDouble = other.VDouble;
        }
        if (other.HasVFloat) {
          VFloat = other.VFloat;
        }
        if (other.HasVBool) {
          VBool = other.VBool;
        }
        if (other.HasVString) {
          MergeVString(other.VString);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_scalarFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _scalarFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 16: {
              result.hasVSignedInt = input.ReadSInt64(ref result.vSignedInt_);
              break;
            }
            case 24: {
              result.hasVUnsignedInt = input.ReadUInt64(ref result.vUnsignedInt_);
              break;
            }
            case 42: {
              result.hasVOpaque = input.ReadBytes(ref result.vOpaque_);
              break;
            }
            case 49: {
              result.hasVDouble = input.ReadDouble(ref result.vDouble_);
              break;
            }
            case 61: {
              result.hasVFloat = input.ReadFloat(ref result.vFloat_);
              break;
            }
            case 64: {
              result.hasVBool = input.ReadBool(ref result.vBool_);
              break;
            }
            case 74: {
              global::Mysqlx.Datatypes.Scalar.Types.String.Builder subBuilder = global::Mysqlx.Datatypes.Scalar.Types.String.CreateBuilder();
              if (result.hasVString) {
                subBuilder.MergeFrom(VString);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              VString = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::Mysqlx.Datatypes.Scalar.Types.Type Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::Mysqlx.Datatypes.Scalar.Types.Type value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::Mysqlx.Datatypes.Scalar.Types.Type.V_SINT;
        return this;
      }
      
      public bool HasVSignedInt {
        get { return result.hasVSignedInt; }
      }
      public long VSignedInt {
        get { return result.VSignedInt; }
        set { SetVSignedInt(value); }
      }
      public Builder SetVSignedInt(long value) {
        PrepareBuilder();
        result.hasVSignedInt = true;
        result.vSignedInt_ = value;
        return this;
      }
      public Builder ClearVSignedInt() {
        PrepareBuilder();
        result.hasVSignedInt = false;
        result.vSignedInt_ = 0;
        return this;
      }
      
      public bool HasVUnsignedInt {
        get { return result.hasVUnsignedInt; }
      }
      [global::System.CLSCompliant(false)]
      public ulong VUnsignedInt {
        get { return result.VUnsignedInt; }
        set { SetVUnsignedInt(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetVUnsignedInt(ulong value) {
        PrepareBuilder();
        result.hasVUnsignedInt = true;
        result.vUnsignedInt_ = value;
        return this;
      }
      public Builder ClearVUnsignedInt() {
        PrepareBuilder();
        result.hasVUnsignedInt = false;
        result.vUnsignedInt_ = 0UL;
        return this;
      }
      
      public bool HasVOpaque {
        get { return result.hasVOpaque; }
      }
      public pb::ByteString VOpaque {
        get { return result.VOpaque; }
        set { SetVOpaque(value); }
      }
      public Builder SetVOpaque(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVOpaque = true;
        result.vOpaque_ = value;
        return this;
      }
      public Builder ClearVOpaque() {
        PrepareBuilder();
        result.hasVOpaque = false;
        result.vOpaque_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasVDouble {
        get { return result.hasVDouble; }
      }
      public double VDouble {
        get { return result.VDouble; }
        set { SetVDouble(value); }
      }
      public Builder SetVDouble(double value) {
        PrepareBuilder();
        result.hasVDouble = true;
        result.vDouble_ = value;
        return this;
      }
      public Builder ClearVDouble() {
        PrepareBuilder();
        result.hasVDouble = false;
        result.vDouble_ = 0D;
        return this;
      }
      
      public bool HasVFloat {
        get { return result.hasVFloat; }
      }
      public float VFloat {
        get { return result.VFloat; }
        set { SetVFloat(value); }
      }
      public Builder SetVFloat(float value) {
        PrepareBuilder();
        result.hasVFloat = true;
        result.vFloat_ = value;
        return this;
      }
      public Builder ClearVFloat() {
        PrepareBuilder();
        result.hasVFloat = false;
        result.vFloat_ = 0F;
        return this;
      }
      
      public bool HasVBool {
        get { return result.hasVBool; }
      }
      public bool VBool {
        get { return result.VBool; }
        set { SetVBool(value); }
      }
      public Builder SetVBool(bool value) {
        PrepareBuilder();
        result.hasVBool = true;
        result.vBool_ = value;
        return this;
      }
      public Builder ClearVBool() {
        PrepareBuilder();
        result.hasVBool = false;
        result.vBool_ = false;
        return this;
      }
      
      public bool HasVString {
       get { return result.hasVString; }
      }
      public global::Mysqlx.Datatypes.Scalar.Types.String VString {
        get { return result.VString; }
        set { SetVString(value); }
      }
      public Builder SetVString(global::Mysqlx.Datatypes.Scalar.Types.String value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVString = true;
        result.vString_ = value;
        return this;
      }
      public Builder SetVString(global::Mysqlx.Datatypes.Scalar.Types.String.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasVString = true;
        result.vString_ = builderForValue.Build();
        return this;
      }
      public Builder MergeVString(global::Mysqlx.Datatypes.Scalar.Types.String value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasVString &&
            result.vString_ != global::Mysqlx.Datatypes.Scalar.Types.String.DefaultInstance) {
            result.vString_ = global::Mysqlx.Datatypes.Scalar.Types.String.CreateBuilder(result.vString_).MergeFrom(value).BuildPartial();
        } else {
          result.vString_ = value;
        }
        result.hasVString = true;
        return this;
      }
      public Builder ClearVString() {
        PrepareBuilder();
        result.hasVString = false;
        result.vString_ = null;
        return this;
      }
    }
    static Scalar() {
      object.ReferenceEquals(global::Mysqlx.Datatypes.MysqlxDatatypes.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class Object : pb::GeneratedMessage<Object, Object.Builder> {
    private Object() { }
    private static readonly Object defaultInstance = new Object().MakeReadOnly();
    private static readonly string[] _objectFieldNames = new string[] { "fld" };
    private static readonly uint[] _objectFieldTags = new uint[] { 10 };
    public static Object DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Object DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Object ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mysqlx.Datatypes.MysqlxDatatypes.internal__static_Mysqlx_Datatypes_Object__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Object, Object.Builder> InternalFieldAccessors {
      get { return global::Mysqlx.Datatypes.MysqlxDatatypes.internal__static_Mysqlx_Datatypes_Object__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class ObjectField : pb::GeneratedMessage<ObjectField, ObjectField.Builder> {
        private ObjectField() { }
        private static readonly ObjectField defaultInstance = new ObjectField().MakeReadOnly();
        private static readonly string[] _objectFieldFieldNames = new string[] { "key", "value" };
        private static readonly uint[] _objectFieldFieldTags = new uint[] { 10, 18 };
        public static ObjectField DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override ObjectField DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override ObjectField ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Mysqlx.Datatypes.MysqlxDatatypes.internal__static_Mysqlx_Datatypes_Object_ObjectField__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<ObjectField, ObjectField.Builder> InternalFieldAccessors {
          get { return global::Mysqlx.Datatypes.MysqlxDatatypes.internal__static_Mysqlx_Datatypes_Object_ObjectField__FieldAccessorTable; }
        }
        
        public const int KeyFieldNumber = 1;
        private bool hasKey;
        private string key_ = "";
        public bool HasKey {
          get { return hasKey; }
        }
        public string Key {
          get { return key_; }
        }
        
        public const int ValueFieldNumber = 2;
        private bool hasValue;
        private global::Mysqlx.Datatypes.Any value_;
        public bool HasValue {
          get { return hasValue; }
        }
        public global::Mysqlx.Datatypes.Any Value {
          get { return value_ ?? global::Mysqlx.Datatypes.Any.DefaultInstance; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasKey) return false;
            if (!hasValue) return false;
            if (!Value.IsInitialized) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _objectFieldFieldNames;
          if (hasKey) {
            output.WriteString(1, field_names[0], Key);
          }
          if (hasValue) {
            output.WriteMessage(2, field_names[1], Value);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }
        
        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          if (hasKey) {
            size += pb::CodedOutputStream.ComputeStringSize(1, Key);
          }
          if (hasValue) {
            size += pb::CodedOutputStream.ComputeMessageSize(2, Value);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static ObjectField ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ObjectField ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ObjectField ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ObjectField ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ObjectField ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ObjectField ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static ObjectField ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static ObjectField ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static ObjectField ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ObjectField ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private ObjectField MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(ObjectField prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<ObjectField, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(ObjectField cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private ObjectField result;
          
          private ObjectField PrepareBuilder() {
            if (resultIsReadOnly) {
              ObjectField original = result;
              result = new ObjectField();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override ObjectField MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Mysqlx.Datatypes.Object.Types.ObjectField.Descriptor; }
          }
          
          public override ObjectField DefaultInstanceForType {
            get { return global::Mysqlx.Datatypes.Object.Types.ObjectField.DefaultInstance; }
          }
          
          public override ObjectField BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is ObjectField) {
              return MergeFrom((ObjectField) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(ObjectField other) {
            if (other == global::Mysqlx.Datatypes.Object.Types.ObjectField.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasKey) {
              Key = other.Key;
            }
            if (other.HasValue) {
              MergeValue(other.Value);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_objectFieldFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _objectFieldFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasKey = input.ReadString(ref result.key_);
                  break;
                }
                case 18: {
                  global::Mysqlx.Datatypes.Any.Builder subBuilder = global::Mysqlx.Datatypes.Any.CreateBuilder();
                  if (result.hasValue) {
                    subBuilder.MergeFrom(Value);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Value = subBuilder.BuildPartial();
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasKey {
            get { return result.hasKey; }
          }
          public string Key {
            get { return result.Key; }
            set { SetKey(value); }
          }
          public Builder SetKey(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasKey = true;
            result.key_ = value;
            return this;
          }
          public Builder ClearKey() {
            PrepareBuilder();
            result.hasKey = false;
            result.key_ = "";
            return this;
          }
          
          public bool HasValue {
           get { return result.hasValue; }
          }
          public global::Mysqlx.Datatypes.Any Value {
            get { return result.Value; }
            set { SetValue(value); }
          }
          public Builder SetValue(global::Mysqlx.Datatypes.Any value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasValue = true;
            result.value_ = value;
            return this;
          }
          public Builder SetValue(global::Mysqlx.Datatypes.Any.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasValue = true;
            result.value_ = builderForValue.Build();
            return this;
          }
          public Builder MergeValue(global::Mysqlx.Datatypes.Any value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasValue &&
                result.value_ != global::Mysqlx.Datatypes.Any.DefaultInstance) {
                result.value_ = global::Mysqlx.Datatypes.Any.CreateBuilder(result.value_).MergeFrom(value).BuildPartial();
            } else {
              result.value_ = value;
            }
            result.hasValue = true;
            return this;
          }
          public Builder ClearValue() {
            PrepareBuilder();
            result.hasValue = false;
            result.value_ = null;
            return this;
          }
        }
        static ObjectField() {
          object.ReferenceEquals(global::Mysqlx.Datatypes.MysqlxDatatypes.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int FldFieldNumber = 1;
    private pbc::PopsicleList<global::Mysqlx.Datatypes.Object.Types.ObjectField> fld_ = new pbc::PopsicleList<global::Mysqlx.Datatypes.Object.Types.ObjectField>();
    public scg::IList<global::Mysqlx.Datatypes.Object.Types.ObjectField> FldList {
      get { return fld_; }
    }
    public int FldCount {
      get { return fld_.Count; }
    }
    public global::Mysqlx.Datatypes.Object.Types.ObjectField GetFld(int index) {
      return fld_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Mysqlx.Datatypes.Object.Types.ObjectField element in FldList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _objectFieldNames;
      if (fld_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], fld_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::Mysqlx.Datatypes.Object.Types.ObjectField element in FldList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Object ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Object ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Object ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Object ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Object ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Object ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Object ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Object ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Object ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Object ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Object MakeReadOnly() {
      fld_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Object prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Object, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Object cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Object result;
      
      private Object PrepareBuilder() {
        if (resultIsReadOnly) {
          Object original = result;
          result = new Object();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Object MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mysqlx.Datatypes.Object.Descriptor; }
      }
      
      public override Object DefaultInstanceForType {
        get { return global::Mysqlx.Datatypes.Object.DefaultInstance; }
      }
      
      public override Object BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Object) {
          return MergeFrom((Object) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Object other) {
        if (other == global::Mysqlx.Datatypes.Object.DefaultInstance) return this;
        PrepareBuilder();
        if (other.fld_.Count != 0) {
          result.fld_.Add(other.fld_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_objectFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _objectFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.fld_, global::Mysqlx.Datatypes.Object.Types.ObjectField.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Mysqlx.Datatypes.Object.Types.ObjectField> FldList {
        get { return PrepareBuilder().fld_; }
      }
      public int FldCount {
        get { return result.FldCount; }
      }
      public global::Mysqlx.Datatypes.Object.Types.ObjectField GetFld(int index) {
        return result.GetFld(index);
      }
      public Builder SetFld(int index, global::Mysqlx.Datatypes.Object.Types.ObjectField value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.fld_[index] = value;
        return this;
      }
      public Builder SetFld(int index, global::Mysqlx.Datatypes.Object.Types.ObjectField.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.fld_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddFld(global::Mysqlx.Datatypes.Object.Types.ObjectField value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.fld_.Add(value);
        return this;
      }
      public Builder AddFld(global::Mysqlx.Datatypes.Object.Types.ObjectField.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.fld_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeFld(scg::IEnumerable<global::Mysqlx.Datatypes.Object.Types.ObjectField> values) {
        PrepareBuilder();
        result.fld_.Add(values);
        return this;
      }
      public Builder ClearFld() {
        PrepareBuilder();
        result.fld_.Clear();
        return this;
      }
    }
    static Object() {
      object.ReferenceEquals(global::Mysqlx.Datatypes.MysqlxDatatypes.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class Array : pb::GeneratedMessage<Array, Array.Builder> {
    private Array() { }
    private static readonly Array defaultInstance = new Array().MakeReadOnly();
    private static readonly string[] _arrayFieldNames = new string[] { "value" };
    private static readonly uint[] _arrayFieldTags = new uint[] { 10 };
    public static Array DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Array DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Array ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mysqlx.Datatypes.MysqlxDatatypes.internal__static_Mysqlx_Datatypes_Array__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Array, Array.Builder> InternalFieldAccessors {
      get { return global::Mysqlx.Datatypes.MysqlxDatatypes.internal__static_Mysqlx_Datatypes_Array__FieldAccessorTable; }
    }
    
    public const int ValueFieldNumber = 1;
    private pbc::PopsicleList<global::Mysqlx.Datatypes.Any> value_ = new pbc::PopsicleList<global::Mysqlx.Datatypes.Any>();
    public scg::IList<global::Mysqlx.Datatypes.Any> ValueList {
      get { return value_; }
    }
    public int ValueCount {
      get { return value_.Count; }
    }
    public global::Mysqlx.Datatypes.Any GetValue(int index) {
      return value_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Mysqlx.Datatypes.Any element in ValueList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _arrayFieldNames;
      if (value_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], value_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::Mysqlx.Datatypes.Any element in ValueList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Array ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Array ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Array ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Array ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Array ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Array ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Array ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Array ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Array ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Array ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Array MakeReadOnly() {
      value_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Array prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Array, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Array cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Array result;
      
      private Array PrepareBuilder() {
        if (resultIsReadOnly) {
          Array original = result;
          result = new Array();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Array MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mysqlx.Datatypes.Array.Descriptor; }
      }
      
      public override Array DefaultInstanceForType {
        get { return global::Mysqlx.Datatypes.Array.DefaultInstance; }
      }
      
      public override Array BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Array) {
          return MergeFrom((Array) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Array other) {
        if (other == global::Mysqlx.Datatypes.Array.DefaultInstance) return this;
        PrepareBuilder();
        if (other.value_.Count != 0) {
          result.value_.Add(other.value_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_arrayFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _arrayFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.value_, global::Mysqlx.Datatypes.Any.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Mysqlx.Datatypes.Any> ValueList {
        get { return PrepareBuilder().value_; }
      }
      public int ValueCount {
        get { return result.ValueCount; }
      }
      public global::Mysqlx.Datatypes.Any GetValue(int index) {
        return result.GetValue(index);
      }
      public Builder SetValue(int index, global::Mysqlx.Datatypes.Any value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.value_[index] = value;
        return this;
      }
      public Builder SetValue(int index, global::Mysqlx.Datatypes.Any.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.value_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddValue(global::Mysqlx.Datatypes.Any value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.value_.Add(value);
        return this;
      }
      public Builder AddValue(global::Mysqlx.Datatypes.Any.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.value_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeValue(scg::IEnumerable<global::Mysqlx.Datatypes.Any> values) {
        PrepareBuilder();
        result.value_.Add(values);
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.value_.Clear();
        return this;
      }
    }
    static Array() {
      object.ReferenceEquals(global::Mysqlx.Datatypes.MysqlxDatatypes.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class Any : pb::GeneratedMessage<Any, Any.Builder> {
    private Any() { }
    private static readonly Any defaultInstance = new Any().MakeReadOnly();
    private static readonly string[] _anyFieldNames = new string[] { "array", "obj", "scalar", "type" };
    private static readonly uint[] _anyFieldTags = new uint[] { 34, 26, 18, 8 };
    public static Any DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Any DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Any ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mysqlx.Datatypes.MysqlxDatatypes.internal__static_Mysqlx_Datatypes_Any__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Any, Any.Builder> InternalFieldAccessors {
      get { return global::Mysqlx.Datatypes.MysqlxDatatypes.internal__static_Mysqlx_Datatypes_Any__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Type {
        SCALAR = 1,
        OBJECT = 2,
        ARRAY = 3,
      }
      
    }
    #endregion
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private global::Mysqlx.Datatypes.Any.Types.Type type_ = global::Mysqlx.Datatypes.Any.Types.Type.SCALAR;
    public bool HasType {
      get { return hasType; }
    }
    public global::Mysqlx.Datatypes.Any.Types.Type Type {
      get { return type_; }
    }
    
    public const int ScalarFieldNumber = 2;
    private bool hasScalar;
    private global::Mysqlx.Datatypes.Scalar scalar_;
    public bool HasScalar {
      get { return hasScalar; }
    }
    public global::Mysqlx.Datatypes.Scalar Scalar {
      get { return scalar_ ?? global::Mysqlx.Datatypes.Scalar.DefaultInstance; }
    }
    
    public const int ObjFieldNumber = 3;
    private bool hasObj;
    private global::Mysqlx.Datatypes.Object obj_;
    public bool HasObj {
      get { return hasObj; }
    }
    public global::Mysqlx.Datatypes.Object Obj {
      get { return obj_ ?? global::Mysqlx.Datatypes.Object.DefaultInstance; }
    }
    
    public const int ArrayFieldNumber = 4;
    private bool hasArray;
    private global::Mysqlx.Datatypes.Array array_;
    public bool HasArray {
      get { return hasArray; }
    }
    public global::Mysqlx.Datatypes.Array Array {
      get { return array_ ?? global::Mysqlx.Datatypes.Array.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        if (HasScalar) {
          if (!Scalar.IsInitialized) return false;
        }
        if (HasObj) {
          if (!Obj.IsInitialized) return false;
        }
        if (HasArray) {
          if (!Array.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _anyFieldNames;
      if (hasType) {
        output.WriteEnum(1, field_names[3], (int) Type, Type);
      }
      if (hasScalar) {
        output.WriteMessage(2, field_names[2], Scalar);
      }
      if (hasObj) {
        output.WriteMessage(3, field_names[1], Obj);
      }
      if (hasArray) {
        output.WriteMessage(4, field_names[0], Array);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasType) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
      }
      if (hasScalar) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Scalar);
      }
      if (hasObj) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Obj);
      }
      if (hasArray) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, Array);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Any ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Any ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Any ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Any ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Any ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Any ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Any ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Any ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Any ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Any ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Any MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Any prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Any, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Any cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Any result;
      
      private Any PrepareBuilder() {
        if (resultIsReadOnly) {
          Any original = result;
          result = new Any();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Any MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mysqlx.Datatypes.Any.Descriptor; }
      }
      
      public override Any DefaultInstanceForType {
        get { return global::Mysqlx.Datatypes.Any.DefaultInstance; }
      }
      
      public override Any BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Any) {
          return MergeFrom((Any) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Any other) {
        if (other == global::Mysqlx.Datatypes.Any.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasScalar) {
          MergeScalar(other.Scalar);
        }
        if (other.HasObj) {
          MergeObj(other.Obj);
        }
        if (other.HasArray) {
          MergeArray(other.Array);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_anyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _anyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              global::Mysqlx.Datatypes.Scalar.Builder subBuilder = global::Mysqlx.Datatypes.Scalar.CreateBuilder();
              if (result.hasScalar) {
                subBuilder.MergeFrom(Scalar);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Scalar = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::Mysqlx.Datatypes.Object.Builder subBuilder = global::Mysqlx.Datatypes.Object.CreateBuilder();
              if (result.hasObj) {
                subBuilder.MergeFrom(Obj);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Obj = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::Mysqlx.Datatypes.Array.Builder subBuilder = global::Mysqlx.Datatypes.Array.CreateBuilder();
              if (result.hasArray) {
                subBuilder.MergeFrom(Array);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Array = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::Mysqlx.Datatypes.Any.Types.Type Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::Mysqlx.Datatypes.Any.Types.Type value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::Mysqlx.Datatypes.Any.Types.Type.SCALAR;
        return this;
      }
      
      public bool HasScalar {
       get { return result.hasScalar; }
      }
      public global::Mysqlx.Datatypes.Scalar Scalar {
        get { return result.Scalar; }
        set { SetScalar(value); }
      }
      public Builder SetScalar(global::Mysqlx.Datatypes.Scalar value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasScalar = true;
        result.scalar_ = value;
        return this;
      }
      public Builder SetScalar(global::Mysqlx.Datatypes.Scalar.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasScalar = true;
        result.scalar_ = builderForValue.Build();
        return this;
      }
      public Builder MergeScalar(global::Mysqlx.Datatypes.Scalar value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasScalar &&
            result.scalar_ != global::Mysqlx.Datatypes.Scalar.DefaultInstance) {
            result.scalar_ = global::Mysqlx.Datatypes.Scalar.CreateBuilder(result.scalar_).MergeFrom(value).BuildPartial();
        } else {
          result.scalar_ = value;
        }
        result.hasScalar = true;
        return this;
      }
      public Builder ClearScalar() {
        PrepareBuilder();
        result.hasScalar = false;
        result.scalar_ = null;
        return this;
      }
      
      public bool HasObj {
       get { return result.hasObj; }
      }
      public global::Mysqlx.Datatypes.Object Obj {
        get { return result.Obj; }
        set { SetObj(value); }
      }
      public Builder SetObj(global::Mysqlx.Datatypes.Object value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasObj = true;
        result.obj_ = value;
        return this;
      }
      public Builder SetObj(global::Mysqlx.Datatypes.Object.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasObj = true;
        result.obj_ = builderForValue.Build();
        return this;
      }
      public Builder MergeObj(global::Mysqlx.Datatypes.Object value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasObj &&
            result.obj_ != global::Mysqlx.Datatypes.Object.DefaultInstance) {
            result.obj_ = global::Mysqlx.Datatypes.Object.CreateBuilder(result.obj_).MergeFrom(value).BuildPartial();
        } else {
          result.obj_ = value;
        }
        result.hasObj = true;
        return this;
      }
      public Builder ClearObj() {
        PrepareBuilder();
        result.hasObj = false;
        result.obj_ = null;
        return this;
      }
      
      public bool HasArray {
       get { return result.hasArray; }
      }
      public global::Mysqlx.Datatypes.Array Array {
        get { return result.Array; }
        set { SetArray(value); }
      }
      public Builder SetArray(global::Mysqlx.Datatypes.Array value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasArray = true;
        result.array_ = value;
        return this;
      }
      public Builder SetArray(global::Mysqlx.Datatypes.Array.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasArray = true;
        result.array_ = builderForValue.Build();
        return this;
      }
      public Builder MergeArray(global::Mysqlx.Datatypes.Array value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasArray &&
            result.array_ != global::Mysqlx.Datatypes.Array.DefaultInstance) {
            result.array_ = global::Mysqlx.Datatypes.Array.CreateBuilder(result.array_).MergeFrom(value).BuildPartial();
        } else {
          result.array_ = value;
        }
        result.hasArray = true;
        return this;
      }
      public Builder ClearArray() {
        PrepareBuilder();
        result.hasArray = false;
        result.array_ = null;
        return this;
      }
    }
    static Any() {
      object.ReferenceEquals(global::Mysqlx.Datatypes.MysqlxDatatypes.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
