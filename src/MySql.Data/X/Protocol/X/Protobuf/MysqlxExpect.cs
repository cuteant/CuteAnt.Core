// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Mysqlx.Expect {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal static partial class MysqlxExpect {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Mysqlx_Expect_Open__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Expect.Open, global::Mysqlx.Expect.Open.Builder> internal__static_Mysqlx_Expect_Open__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Mysqlx_Expect_Open_Condition__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Expect.Open.Types.Condition, global::Mysqlx.Expect.Open.Types.Condition.Builder> internal__static_Mysqlx_Expect_Open_Condition__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Mysqlx_Expect_Close__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Expect.Close, global::Mysqlx.Expect.Close.Builder> internal__static_Mysqlx_Expect_Close__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static MysqlxExpect() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNteXNxbHhfZXhwZWN0LnByb3RvEg1NeXNxbHguRXhwZWN0IoADCgRPcGVu", 
            "EkIKAm9wGAEgASgOMiAuTXlzcWx4LkV4cGVjdC5PcGVuLkN0eE9wZXJhdGlv", 
            "bjoURVhQRUNUX0NUWF9DT1BZX1BSRVYSKwoEY29uZBgCIAMoCzIdLk15c3Fs", 
            "eC5FeHBlY3QuT3Blbi5Db25kaXRpb24axgEKCUNvbmRpdGlvbhIVCg1jb25k", 
            "aXRpb25fa2V5GAEgAigNEhcKD2NvbmRpdGlvbl92YWx1ZRgCIAEoDBJLCgJv", 
            "cBgDIAEoDjIwLk15c3FseC5FeHBlY3QuT3Blbi5Db25kaXRpb24uQ29uZGl0", 
            "aW9uT3BlcmF0aW9uOg1FWFBFQ1RfT1BfU0VUIjwKEkNvbmRpdGlvbk9wZXJh", 
            "dGlvbhIRCg1FWFBFQ1RfT1BfU0VUEAASEwoPRVhQRUNUX09QX1VOU0VUEAEi", 
            "PgoMQ3R4T3BlcmF0aW9uEhgKFEVYUEVDVF9DVFhfQ09QWV9QUkVWEAASFAoQ", 
            "RVhQRUNUX0NUWF9FTVBUWRABIgcKBUNsb3NlQh4KHGNvbS5teXNxbC5jai5t", 
          "eXNxbHgucHJvdG9idWY="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Mysqlx_Expect_Open__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Mysqlx_Expect_Open__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Expect.Open, global::Mysqlx.Expect.Open.Builder>(internal__static_Mysqlx_Expect_Open__Descriptor,
                new string[] { "Op", "Cond", });
        internal__static_Mysqlx_Expect_Open_Condition__Descriptor = internal__static_Mysqlx_Expect_Open__Descriptor.NestedTypes[0];
        internal__static_Mysqlx_Expect_Open_Condition__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Expect.Open.Types.Condition, global::Mysqlx.Expect.Open.Types.Condition.Builder>(internal__static_Mysqlx_Expect_Open_Condition__Descriptor,
                new string[] { "ConditionKey", "ConditionValue", "Op", });
        internal__static_Mysqlx_Expect_Close__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Mysqlx_Expect_Close__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Expect.Close, global::Mysqlx.Expect.Close.Builder>(internal__static_Mysqlx_Expect_Close__Descriptor,
                new string[] { });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class Open : pb::GeneratedMessage<Open, Open.Builder> {
    private Open() { }
    private static readonly Open defaultInstance = new Open().MakeReadOnly();
    private static readonly string[] _openFieldNames = new string[] { "cond", "op" };
    private static readonly uint[] _openFieldTags = new uint[] { 18, 8 };
    public static Open DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Open DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Open ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mysqlx.Expect.MysqlxExpect.internal__static_Mysqlx_Expect_Open__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Open, Open.Builder> InternalFieldAccessors {
      get { return global::Mysqlx.Expect.MysqlxExpect.internal__static_Mysqlx_Expect_Open__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum CtxOperation {
        EXPECT_CTX_COPY_PREV = 0,
        EXPECT_CTX_EMPTY = 1,
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Condition : pb::GeneratedMessage<Condition, Condition.Builder> {
        private Condition() { }
        private static readonly Condition defaultInstance = new Condition().MakeReadOnly();
        private static readonly string[] _conditionFieldNames = new string[] { "condition_key", "condition_value", "op" };
        private static readonly uint[] _conditionFieldTags = new uint[] { 8, 18, 24 };
        public static Condition DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Condition DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Condition ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Mysqlx.Expect.MysqlxExpect.internal__static_Mysqlx_Expect_Open_Condition__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Condition, Condition.Builder> InternalFieldAccessors {
          get { return global::Mysqlx.Expect.MysqlxExpect.internal__static_Mysqlx_Expect_Open_Condition__FieldAccessorTable; }
        }
        
        #region Nested types
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static partial class Types {
          public enum ConditionOperation {
            EXPECT_OP_SET = 0,
            EXPECT_OP_UNSET = 1,
          }
          
        }
        #endregion
        
        public const int ConditionKeyFieldNumber = 1;
        private bool hasConditionKey;
        private uint conditionKey_;
        public bool HasConditionKey {
          get { return hasConditionKey; }
        }
        [global::System.CLSCompliant(false)]
        public uint ConditionKey {
          get { return conditionKey_; }
        }
        
        public const int ConditionValueFieldNumber = 2;
        private bool hasConditionValue;
        private pb::ByteString conditionValue_ = pb::ByteString.Empty;
        public bool HasConditionValue {
          get { return hasConditionValue; }
        }
        public pb::ByteString ConditionValue {
          get { return conditionValue_; }
        }
        
        public const int OpFieldNumber = 3;
        private bool hasOp;
        private global::Mysqlx.Expect.Open.Types.Condition.Types.ConditionOperation op_ = global::Mysqlx.Expect.Open.Types.Condition.Types.ConditionOperation.EXPECT_OP_SET;
        public bool HasOp {
          get { return hasOp; }
        }
        public global::Mysqlx.Expect.Open.Types.Condition.Types.ConditionOperation Op {
          get { return op_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasConditionKey) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _conditionFieldNames;
          if (hasConditionKey) {
            output.WriteUInt32(1, field_names[0], ConditionKey);
          }
          if (hasConditionValue) {
            output.WriteBytes(2, field_names[1], ConditionValue);
          }
          if (hasOp) {
            output.WriteEnum(3, field_names[2], (int) Op, Op);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }
        
        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          if (hasConditionKey) {
            size += pb::CodedOutputStream.ComputeUInt32Size(1, ConditionKey);
          }
          if (hasConditionValue) {
            size += pb::CodedOutputStream.ComputeBytesSize(2, ConditionValue);
          }
          if (hasOp) {
            size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Op);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static Condition ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Condition ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Condition ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Condition ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Condition ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Condition ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Condition ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Condition ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Condition ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Condition ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Condition MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Condition prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<Condition, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Condition cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Condition result;
          
          private Condition PrepareBuilder() {
            if (resultIsReadOnly) {
              Condition original = result;
              result = new Condition();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Condition MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Mysqlx.Expect.Open.Types.Condition.Descriptor; }
          }
          
          public override Condition DefaultInstanceForType {
            get { return global::Mysqlx.Expect.Open.Types.Condition.DefaultInstance; }
          }
          
          public override Condition BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Condition) {
              return MergeFrom((Condition) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Condition other) {
            if (other == global::Mysqlx.Expect.Open.Types.Condition.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasConditionKey) {
              ConditionKey = other.ConditionKey;
            }
            if (other.HasConditionValue) {
              ConditionValue = other.ConditionValue;
            }
            if (other.HasOp) {
              Op = other.Op;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_conditionFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _conditionFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasConditionKey = input.ReadUInt32(ref result.conditionKey_);
                  break;
                }
                case 18: {
                  result.hasConditionValue = input.ReadBytes(ref result.conditionValue_);
                  break;
                }
                case 24: {
                  object unknown;
                  if(input.ReadEnum(ref result.op_, out unknown)) {
                    result.hasOp = true;
                  } else if(unknown is int) {
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    unknownFields.MergeVarintField(3, (ulong)(int)unknown);
                  }
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasConditionKey {
            get { return result.hasConditionKey; }
          }
          [global::System.CLSCompliant(false)]
          public uint ConditionKey {
            get { return result.ConditionKey; }
            set { SetConditionKey(value); }
          }
          [global::System.CLSCompliant(false)]
          public Builder SetConditionKey(uint value) {
            PrepareBuilder();
            result.hasConditionKey = true;
            result.conditionKey_ = value;
            return this;
          }
          public Builder ClearConditionKey() {
            PrepareBuilder();
            result.hasConditionKey = false;
            result.conditionKey_ = 0;
            return this;
          }
          
          public bool HasConditionValue {
            get { return result.hasConditionValue; }
          }
          public pb::ByteString ConditionValue {
            get { return result.ConditionValue; }
            set { SetConditionValue(value); }
          }
          public Builder SetConditionValue(pb::ByteString value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasConditionValue = true;
            result.conditionValue_ = value;
            return this;
          }
          public Builder ClearConditionValue() {
            PrepareBuilder();
            result.hasConditionValue = false;
            result.conditionValue_ = pb::ByteString.Empty;
            return this;
          }
          
          public bool HasOp {
           get { return result.hasOp; }
          }
          public global::Mysqlx.Expect.Open.Types.Condition.Types.ConditionOperation Op {
            get { return result.Op; }
            set { SetOp(value); }
          }
          public Builder SetOp(global::Mysqlx.Expect.Open.Types.Condition.Types.ConditionOperation value) {
            PrepareBuilder();
            result.hasOp = true;
            result.op_ = value;
            return this;
          }
          public Builder ClearOp() {
            PrepareBuilder();
            result.hasOp = false;
            result.op_ = global::Mysqlx.Expect.Open.Types.Condition.Types.ConditionOperation.EXPECT_OP_SET;
            return this;
          }
        }
        static Condition() {
          object.ReferenceEquals(global::Mysqlx.Expect.MysqlxExpect.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int OpFieldNumber = 1;
    private bool hasOp;
    private global::Mysqlx.Expect.Open.Types.CtxOperation op_ = global::Mysqlx.Expect.Open.Types.CtxOperation.EXPECT_CTX_COPY_PREV;
    public bool HasOp {
      get { return hasOp; }
    }
    public global::Mysqlx.Expect.Open.Types.CtxOperation Op {
      get { return op_; }
    }
    
    public const int CondFieldNumber = 2;
    private pbc::PopsicleList<global::Mysqlx.Expect.Open.Types.Condition> cond_ = new pbc::PopsicleList<global::Mysqlx.Expect.Open.Types.Condition>();
    public scg::IList<global::Mysqlx.Expect.Open.Types.Condition> CondList {
      get { return cond_; }
    }
    public int CondCount {
      get { return cond_.Count; }
    }
    public global::Mysqlx.Expect.Open.Types.Condition GetCond(int index) {
      return cond_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Mysqlx.Expect.Open.Types.Condition element in CondList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _openFieldNames;
      if (hasOp) {
        output.WriteEnum(1, field_names[1], (int) Op, Op);
      }
      if (cond_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], cond_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasOp) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Op);
      }
      foreach (global::Mysqlx.Expect.Open.Types.Condition element in CondList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Open ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Open ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Open ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Open ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Open ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Open ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Open ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Open ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Open ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Open ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Open MakeReadOnly() {
      cond_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Open prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Open, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Open cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Open result;
      
      private Open PrepareBuilder() {
        if (resultIsReadOnly) {
          Open original = result;
          result = new Open();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Open MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mysqlx.Expect.Open.Descriptor; }
      }
      
      public override Open DefaultInstanceForType {
        get { return global::Mysqlx.Expect.Open.DefaultInstance; }
      }
      
      public override Open BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Open) {
          return MergeFrom((Open) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Open other) {
        if (other == global::Mysqlx.Expect.Open.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasOp) {
          Op = other.Op;
        }
        if (other.cond_.Count != 0) {
          result.cond_.Add(other.cond_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_openFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _openFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.op_, out unknown)) {
                result.hasOp = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.cond_, global::Mysqlx.Expect.Open.Types.Condition.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasOp {
       get { return result.hasOp; }
      }
      public global::Mysqlx.Expect.Open.Types.CtxOperation Op {
        get { return result.Op; }
        set { SetOp(value); }
      }
      public Builder SetOp(global::Mysqlx.Expect.Open.Types.CtxOperation value) {
        PrepareBuilder();
        result.hasOp = true;
        result.op_ = value;
        return this;
      }
      public Builder ClearOp() {
        PrepareBuilder();
        result.hasOp = false;
        result.op_ = global::Mysqlx.Expect.Open.Types.CtxOperation.EXPECT_CTX_COPY_PREV;
        return this;
      }
      
      public pbc::IPopsicleList<global::Mysqlx.Expect.Open.Types.Condition> CondList {
        get { return PrepareBuilder().cond_; }
      }
      public int CondCount {
        get { return result.CondCount; }
      }
      public global::Mysqlx.Expect.Open.Types.Condition GetCond(int index) {
        return result.GetCond(index);
      }
      public Builder SetCond(int index, global::Mysqlx.Expect.Open.Types.Condition value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.cond_[index] = value;
        return this;
      }
      public Builder SetCond(int index, global::Mysqlx.Expect.Open.Types.Condition.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.cond_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCond(global::Mysqlx.Expect.Open.Types.Condition value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.cond_.Add(value);
        return this;
      }
      public Builder AddCond(global::Mysqlx.Expect.Open.Types.Condition.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.cond_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCond(scg::IEnumerable<global::Mysqlx.Expect.Open.Types.Condition> values) {
        PrepareBuilder();
        result.cond_.Add(values);
        return this;
      }
      public Builder ClearCond() {
        PrepareBuilder();
        result.cond_.Clear();
        return this;
      }
    }
    static Open() {
      object.ReferenceEquals(global::Mysqlx.Expect.MysqlxExpect.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class Close : pb::GeneratedMessage<Close, Close.Builder> {
    private Close() { }
    private static readonly Close defaultInstance = new Close().MakeReadOnly();
    private static readonly string[] _closeFieldNames = new string[] {  };
    private static readonly uint[] _closeFieldTags = new uint[] {  };
    public static Close DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Close DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Close ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mysqlx.Expect.MysqlxExpect.internal__static_Mysqlx_Expect_Close__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Close, Close.Builder> InternalFieldAccessors {
      get { return global::Mysqlx.Expect.MysqlxExpect.internal__static_Mysqlx_Expect_Close__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _closeFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Close ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Close ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Close ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Close ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Close ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Close ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Close ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Close ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Close ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Close ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Close MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Close prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Close, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Close cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Close result;
      
      private Close PrepareBuilder() {
        if (resultIsReadOnly) {
          Close original = result;
          result = new Close();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Close MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mysqlx.Expect.Close.Descriptor; }
      }
      
      public override Close DefaultInstanceForType {
        get { return global::Mysqlx.Expect.Close.DefaultInstance; }
      }
      
      public override Close BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Close) {
          return MergeFrom((Close) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Close other) {
        if (other == global::Mysqlx.Expect.Close.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_closeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _closeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static Close() {
      object.ReferenceEquals(global::Mysqlx.Expect.MysqlxExpect.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
