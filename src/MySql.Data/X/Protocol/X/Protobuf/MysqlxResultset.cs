// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Mysqlx.Resultset {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal static partial class MysqlxResultset {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Mysqlx_Resultset_FetchDoneMoreOutParams__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Resultset.FetchDoneMoreOutParams, global::Mysqlx.Resultset.FetchDoneMoreOutParams.Builder> internal__static_Mysqlx_Resultset_FetchDoneMoreOutParams__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Mysqlx_Resultset_FetchDoneMoreResultsets__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Resultset.FetchDoneMoreResultsets, global::Mysqlx.Resultset.FetchDoneMoreResultsets.Builder> internal__static_Mysqlx_Resultset_FetchDoneMoreResultsets__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Mysqlx_Resultset_FetchDone__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Resultset.FetchDone, global::Mysqlx.Resultset.FetchDone.Builder> internal__static_Mysqlx_Resultset_FetchDone__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Mysqlx_Resultset_ColumnMetaData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Resultset.ColumnMetaData, global::Mysqlx.Resultset.ColumnMetaData.Builder> internal__static_Mysqlx_Resultset_ColumnMetaData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Mysqlx_Resultset_Row__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Resultset.Row, global::Mysqlx.Resultset.Row.Builder> internal__static_Mysqlx_Resultset_Row__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static MysqlxResultset() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZteXNxbHhfcmVzdWx0c2V0LnByb3RvEhBNeXNxbHguUmVzdWx0c2V0IhgK", 
            "FkZldGNoRG9uZU1vcmVPdXRQYXJhbXMiGQoXRmV0Y2hEb25lTW9yZVJlc3Vs", 
            "dHNldHMiCwoJRmV0Y2hEb25lIp8DCg5Db2x1bW5NZXRhRGF0YRI4CgR0eXBl", 
            "GAEgAigOMiouTXlzcWx4LlJlc3VsdHNldC5Db2x1bW5NZXRhRGF0YS5GaWVs", 
            "ZFR5cGUSDAoEbmFtZRgCIAEoDBIVCg1vcmlnaW5hbF9uYW1lGAMgASgMEg0K", 
            "BXRhYmxlGAQgASgMEhYKDm9yaWdpbmFsX3RhYmxlGAUgASgMEg4KBnNjaGVt", 
            "YRgGIAEoDBIPCgdjYXRhbG9nGAcgASgMEhEKCWNvbGxhdGlvbhgIIAEoBBIZ", 
            "ChFmcmFjdGlvbmFsX2RpZ2l0cxgJIAEoDRIOCgZsZW5ndGgYCiABKA0SDQoF", 
            "ZmxhZ3MYCyABKA0SFAoMY29udGVudF90eXBlGAwgASgNIoIBCglGaWVsZFR5", 
            "cGUSCAoEU0lOVBABEggKBFVJTlQQAhIKCgZET1VCTEUQBRIJCgVGTE9BVBAG", 
            "EgkKBUJZVEVTEAcSCAoEVElNRRAKEgwKCERBVEVUSU1FEAwSBwoDU0VUEA8S", 
            "CAoERU5VTRAQEgcKA0JJVBAREgsKB0RFQ0lNQUwQEiIUCgNSb3cSDQoFZmll", 
          "bGQYASADKAxCHgocY29tLm15c3FsLmNqLm15c3FseC5wcm90b2J1Zg=="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Mysqlx_Resultset_FetchDoneMoreOutParams__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Mysqlx_Resultset_FetchDoneMoreOutParams__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Resultset.FetchDoneMoreOutParams, global::Mysqlx.Resultset.FetchDoneMoreOutParams.Builder>(internal__static_Mysqlx_Resultset_FetchDoneMoreOutParams__Descriptor,
                new string[] { });
        internal__static_Mysqlx_Resultset_FetchDoneMoreResultsets__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Mysqlx_Resultset_FetchDoneMoreResultsets__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Resultset.FetchDoneMoreResultsets, global::Mysqlx.Resultset.FetchDoneMoreResultsets.Builder>(internal__static_Mysqlx_Resultset_FetchDoneMoreResultsets__Descriptor,
                new string[] { });
        internal__static_Mysqlx_Resultset_FetchDone__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Mysqlx_Resultset_FetchDone__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Resultset.FetchDone, global::Mysqlx.Resultset.FetchDone.Builder>(internal__static_Mysqlx_Resultset_FetchDone__Descriptor,
                new string[] { });
        internal__static_Mysqlx_Resultset_ColumnMetaData__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Mysqlx_Resultset_ColumnMetaData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Resultset.ColumnMetaData, global::Mysqlx.Resultset.ColumnMetaData.Builder>(internal__static_Mysqlx_Resultset_ColumnMetaData__Descriptor,
                new string[] { "Type", "Name", "OriginalName", "Table", "OriginalTable", "Schema", "Catalog", "Collation", "FractionalDigits", "Length", "Flags", "ContentType", });
        internal__static_Mysqlx_Resultset_Row__Descriptor = Descriptor.MessageTypes[4];
        internal__static_Mysqlx_Resultset_Row__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Resultset.Row, global::Mysqlx.Resultset.Row.Builder>(internal__static_Mysqlx_Resultset_Row__Descriptor,
                new string[] { "Field", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class FetchDoneMoreOutParams : pb::GeneratedMessage<FetchDoneMoreOutParams, FetchDoneMoreOutParams.Builder> {
    private FetchDoneMoreOutParams() { }
    private static readonly FetchDoneMoreOutParams defaultInstance = new FetchDoneMoreOutParams().MakeReadOnly();
    private static readonly string[] _fetchDoneMoreOutParamsFieldNames = new string[] {  };
    private static readonly uint[] _fetchDoneMoreOutParamsFieldTags = new uint[] {  };
    public static FetchDoneMoreOutParams DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FetchDoneMoreOutParams DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FetchDoneMoreOutParams ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mysqlx.Resultset.MysqlxResultset.internal__static_Mysqlx_Resultset_FetchDoneMoreOutParams__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FetchDoneMoreOutParams, FetchDoneMoreOutParams.Builder> InternalFieldAccessors {
      get { return global::Mysqlx.Resultset.MysqlxResultset.internal__static_Mysqlx_Resultset_FetchDoneMoreOutParams__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _fetchDoneMoreOutParamsFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static FetchDoneMoreOutParams ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FetchDoneMoreOutParams ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FetchDoneMoreOutParams ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FetchDoneMoreOutParams ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FetchDoneMoreOutParams ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FetchDoneMoreOutParams ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FetchDoneMoreOutParams ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FetchDoneMoreOutParams ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FetchDoneMoreOutParams ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FetchDoneMoreOutParams ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FetchDoneMoreOutParams MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FetchDoneMoreOutParams prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<FetchDoneMoreOutParams, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FetchDoneMoreOutParams cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FetchDoneMoreOutParams result;
      
      private FetchDoneMoreOutParams PrepareBuilder() {
        if (resultIsReadOnly) {
          FetchDoneMoreOutParams original = result;
          result = new FetchDoneMoreOutParams();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FetchDoneMoreOutParams MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mysqlx.Resultset.FetchDoneMoreOutParams.Descriptor; }
      }
      
      public override FetchDoneMoreOutParams DefaultInstanceForType {
        get { return global::Mysqlx.Resultset.FetchDoneMoreOutParams.DefaultInstance; }
      }
      
      public override FetchDoneMoreOutParams BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FetchDoneMoreOutParams) {
          return MergeFrom((FetchDoneMoreOutParams) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FetchDoneMoreOutParams other) {
        if (other == global::Mysqlx.Resultset.FetchDoneMoreOutParams.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_fetchDoneMoreOutParamsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _fetchDoneMoreOutParamsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static FetchDoneMoreOutParams() {
      object.ReferenceEquals(global::Mysqlx.Resultset.MysqlxResultset.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class FetchDoneMoreResultsets : pb::GeneratedMessage<FetchDoneMoreResultsets, FetchDoneMoreResultsets.Builder> {
    private FetchDoneMoreResultsets() { }
    private static readonly FetchDoneMoreResultsets defaultInstance = new FetchDoneMoreResultsets().MakeReadOnly();
    private static readonly string[] _fetchDoneMoreResultsetsFieldNames = new string[] {  };
    private static readonly uint[] _fetchDoneMoreResultsetsFieldTags = new uint[] {  };
    public static FetchDoneMoreResultsets DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FetchDoneMoreResultsets DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FetchDoneMoreResultsets ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mysqlx.Resultset.MysqlxResultset.internal__static_Mysqlx_Resultset_FetchDoneMoreResultsets__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FetchDoneMoreResultsets, FetchDoneMoreResultsets.Builder> InternalFieldAccessors {
      get { return global::Mysqlx.Resultset.MysqlxResultset.internal__static_Mysqlx_Resultset_FetchDoneMoreResultsets__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _fetchDoneMoreResultsetsFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static FetchDoneMoreResultsets ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FetchDoneMoreResultsets ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FetchDoneMoreResultsets ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FetchDoneMoreResultsets ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FetchDoneMoreResultsets ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FetchDoneMoreResultsets ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FetchDoneMoreResultsets ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FetchDoneMoreResultsets ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FetchDoneMoreResultsets ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FetchDoneMoreResultsets ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FetchDoneMoreResultsets MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FetchDoneMoreResultsets prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<FetchDoneMoreResultsets, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FetchDoneMoreResultsets cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FetchDoneMoreResultsets result;
      
      private FetchDoneMoreResultsets PrepareBuilder() {
        if (resultIsReadOnly) {
          FetchDoneMoreResultsets original = result;
          result = new FetchDoneMoreResultsets();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FetchDoneMoreResultsets MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mysqlx.Resultset.FetchDoneMoreResultsets.Descriptor; }
      }
      
      public override FetchDoneMoreResultsets DefaultInstanceForType {
        get { return global::Mysqlx.Resultset.FetchDoneMoreResultsets.DefaultInstance; }
      }
      
      public override FetchDoneMoreResultsets BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FetchDoneMoreResultsets) {
          return MergeFrom((FetchDoneMoreResultsets) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FetchDoneMoreResultsets other) {
        if (other == global::Mysqlx.Resultset.FetchDoneMoreResultsets.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_fetchDoneMoreResultsetsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _fetchDoneMoreResultsetsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static FetchDoneMoreResultsets() {
      object.ReferenceEquals(global::Mysqlx.Resultset.MysqlxResultset.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class FetchDone : pb::GeneratedMessage<FetchDone, FetchDone.Builder> {
    private FetchDone() { }
    private static readonly FetchDone defaultInstance = new FetchDone().MakeReadOnly();
    private static readonly string[] _fetchDoneFieldNames = new string[] {  };
    private static readonly uint[] _fetchDoneFieldTags = new uint[] {  };
    public static FetchDone DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FetchDone DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FetchDone ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mysqlx.Resultset.MysqlxResultset.internal__static_Mysqlx_Resultset_FetchDone__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FetchDone, FetchDone.Builder> InternalFieldAccessors {
      get { return global::Mysqlx.Resultset.MysqlxResultset.internal__static_Mysqlx_Resultset_FetchDone__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _fetchDoneFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static FetchDone ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FetchDone ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FetchDone ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FetchDone ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FetchDone ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FetchDone ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FetchDone ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FetchDone ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FetchDone ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FetchDone ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FetchDone MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FetchDone prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<FetchDone, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FetchDone cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FetchDone result;
      
      private FetchDone PrepareBuilder() {
        if (resultIsReadOnly) {
          FetchDone original = result;
          result = new FetchDone();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FetchDone MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mysqlx.Resultset.FetchDone.Descriptor; }
      }
      
      public override FetchDone DefaultInstanceForType {
        get { return global::Mysqlx.Resultset.FetchDone.DefaultInstance; }
      }
      
      public override FetchDone BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FetchDone) {
          return MergeFrom((FetchDone) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FetchDone other) {
        if (other == global::Mysqlx.Resultset.FetchDone.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_fetchDoneFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _fetchDoneFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static FetchDone() {
      object.ReferenceEquals(global::Mysqlx.Resultset.MysqlxResultset.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class ColumnMetaData : pb::GeneratedMessage<ColumnMetaData, ColumnMetaData.Builder> {
    private ColumnMetaData() { }
    private static readonly ColumnMetaData defaultInstance = new ColumnMetaData().MakeReadOnly();
    private static readonly string[] _columnMetaDataFieldNames = new string[] { "catalog", "collation", "content_type", "flags", "fractional_digits", "length", "name", "original_name", "original_table", "schema", "table", "type" };
    private static readonly uint[] _columnMetaDataFieldTags = new uint[] { 58, 64, 96, 88, 72, 80, 18, 26, 42, 50, 34, 8 };
    public static ColumnMetaData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ColumnMetaData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ColumnMetaData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mysqlx.Resultset.MysqlxResultset.internal__static_Mysqlx_Resultset_ColumnMetaData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ColumnMetaData, ColumnMetaData.Builder> InternalFieldAccessors {
      get { return global::Mysqlx.Resultset.MysqlxResultset.internal__static_Mysqlx_Resultset_ColumnMetaData__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum FieldType {
        SINT = 1,
        UINT = 2,
        DOUBLE = 5,
        FLOAT = 6,
        BYTES = 7,
        TIME = 10,
        DATETIME = 12,
        SET = 15,
        ENUM = 16,
        BIT = 17,
        DECIMAL = 18,
      }
      
    }
    #endregion
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private global::Mysqlx.Resultset.ColumnMetaData.Types.FieldType type_ = global::Mysqlx.Resultset.ColumnMetaData.Types.FieldType.SINT;
    public bool HasType {
      get { return hasType; }
    }
    public global::Mysqlx.Resultset.ColumnMetaData.Types.FieldType Type {
      get { return type_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private pb::ByteString name_ = pb::ByteString.Empty;
    public bool HasName {
      get { return hasName; }
    }
    public pb::ByteString Name {
      get { return name_; }
    }
    
    public const int OriginalNameFieldNumber = 3;
    private bool hasOriginalName;
    private pb::ByteString originalName_ = pb::ByteString.Empty;
    public bool HasOriginalName {
      get { return hasOriginalName; }
    }
    public pb::ByteString OriginalName {
      get { return originalName_; }
    }
    
    public const int TableFieldNumber = 4;
    private bool hasTable;
    private pb::ByteString table_ = pb::ByteString.Empty;
    public bool HasTable {
      get { return hasTable; }
    }
    public pb::ByteString Table {
      get { return table_; }
    }
    
    public const int OriginalTableFieldNumber = 5;
    private bool hasOriginalTable;
    private pb::ByteString originalTable_ = pb::ByteString.Empty;
    public bool HasOriginalTable {
      get { return hasOriginalTable; }
    }
    public pb::ByteString OriginalTable {
      get { return originalTable_; }
    }
    
    public const int SchemaFieldNumber = 6;
    private bool hasSchema;
    private pb::ByteString schema_ = pb::ByteString.Empty;
    public bool HasSchema {
      get { return hasSchema; }
    }
    public pb::ByteString Schema {
      get { return schema_; }
    }
    
    public const int CatalogFieldNumber = 7;
    private bool hasCatalog;
    private pb::ByteString catalog_ = pb::ByteString.Empty;
    public bool HasCatalog {
      get { return hasCatalog; }
    }
    public pb::ByteString Catalog {
      get { return catalog_; }
    }
    
    public const int CollationFieldNumber = 8;
    private bool hasCollation;
    private ulong collation_;
    public bool HasCollation {
      get { return hasCollation; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Collation {
      get { return collation_; }
    }
    
    public const int FractionalDigitsFieldNumber = 9;
    private bool hasFractionalDigits;
    private uint fractionalDigits_;
    public bool HasFractionalDigits {
      get { return hasFractionalDigits; }
    }
    [global::System.CLSCompliant(false)]
    public uint FractionalDigits {
      get { return fractionalDigits_; }
    }
    
    public const int LengthFieldNumber = 10;
    private bool hasLength;
    private uint length_;
    public bool HasLength {
      get { return hasLength; }
    }
    [global::System.CLSCompliant(false)]
    public uint Length {
      get { return length_; }
    }
    
    public const int FlagsFieldNumber = 11;
    private bool hasFlags;
    private uint flags_;
    public bool HasFlags {
      get { return hasFlags; }
    }
    [global::System.CLSCompliant(false)]
    public uint Flags {
      get { return flags_; }
    }
    
    public const int ContentTypeFieldNumber = 12;
    private bool hasContentType;
    private uint contentType_;
    public bool HasContentType {
      get { return hasContentType; }
    }
    [global::System.CLSCompliant(false)]
    public uint ContentType {
      get { return contentType_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _columnMetaDataFieldNames;
      if (hasType) {
        output.WriteEnum(1, field_names[11], (int) Type, Type);
      }
      if (hasName) {
        output.WriteBytes(2, field_names[6], Name);
      }
      if (hasOriginalName) {
        output.WriteBytes(3, field_names[7], OriginalName);
      }
      if (hasTable) {
        output.WriteBytes(4, field_names[10], Table);
      }
      if (hasOriginalTable) {
        output.WriteBytes(5, field_names[8], OriginalTable);
      }
      if (hasSchema) {
        output.WriteBytes(6, field_names[9], Schema);
      }
      if (hasCatalog) {
        output.WriteBytes(7, field_names[0], Catalog);
      }
      if (hasCollation) {
        output.WriteUInt64(8, field_names[1], Collation);
      }
      if (hasFractionalDigits) {
        output.WriteUInt32(9, field_names[4], FractionalDigits);
      }
      if (hasLength) {
        output.WriteUInt32(10, field_names[5], Length);
      }
      if (hasFlags) {
        output.WriteUInt32(11, field_names[3], Flags);
      }
      if (hasContentType) {
        output.WriteUInt32(12, field_names[2], ContentType);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasType) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
      }
      if (hasName) {
        size += pb::CodedOutputStream.ComputeBytesSize(2, Name);
      }
      if (hasOriginalName) {
        size += pb::CodedOutputStream.ComputeBytesSize(3, OriginalName);
      }
      if (hasTable) {
        size += pb::CodedOutputStream.ComputeBytesSize(4, Table);
      }
      if (hasOriginalTable) {
        size += pb::CodedOutputStream.ComputeBytesSize(5, OriginalTable);
      }
      if (hasSchema) {
        size += pb::CodedOutputStream.ComputeBytesSize(6, Schema);
      }
      if (hasCatalog) {
        size += pb::CodedOutputStream.ComputeBytesSize(7, Catalog);
      }
      if (hasCollation) {
        size += pb::CodedOutputStream.ComputeUInt64Size(8, Collation);
      }
      if (hasFractionalDigits) {
        size += pb::CodedOutputStream.ComputeUInt32Size(9, FractionalDigits);
      }
      if (hasLength) {
        size += pb::CodedOutputStream.ComputeUInt32Size(10, Length);
      }
      if (hasFlags) {
        size += pb::CodedOutputStream.ComputeUInt32Size(11, Flags);
      }
      if (hasContentType) {
        size += pb::CodedOutputStream.ComputeUInt32Size(12, ContentType);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ColumnMetaData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ColumnMetaData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ColumnMetaData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ColumnMetaData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ColumnMetaData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ColumnMetaData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ColumnMetaData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ColumnMetaData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ColumnMetaData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ColumnMetaData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ColumnMetaData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ColumnMetaData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ColumnMetaData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ColumnMetaData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ColumnMetaData result;
      
      private ColumnMetaData PrepareBuilder() {
        if (resultIsReadOnly) {
          ColumnMetaData original = result;
          result = new ColumnMetaData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ColumnMetaData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mysqlx.Resultset.ColumnMetaData.Descriptor; }
      }
      
      public override ColumnMetaData DefaultInstanceForType {
        get { return global::Mysqlx.Resultset.ColumnMetaData.DefaultInstance; }
      }
      
      public override ColumnMetaData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ColumnMetaData) {
          return MergeFrom((ColumnMetaData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ColumnMetaData other) {
        if (other == global::Mysqlx.Resultset.ColumnMetaData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasOriginalName) {
          OriginalName = other.OriginalName;
        }
        if (other.HasTable) {
          Table = other.Table;
        }
        if (other.HasOriginalTable) {
          OriginalTable = other.OriginalTable;
        }
        if (other.HasSchema) {
          Schema = other.Schema;
        }
        if (other.HasCatalog) {
          Catalog = other.Catalog;
        }
        if (other.HasCollation) {
          Collation = other.Collation;
        }
        if (other.HasFractionalDigits) {
          FractionalDigits = other.FractionalDigits;
        }
        if (other.HasLength) {
          Length = other.Length;
        }
        if (other.HasFlags) {
          Flags = other.Flags;
        }
        if (other.HasContentType) {
          ContentType = other.ContentType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_columnMetaDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _columnMetaDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              result.hasName = input.ReadBytes(ref result.name_);
              break;
            }
            case 26: {
              result.hasOriginalName = input.ReadBytes(ref result.originalName_);
              break;
            }
            case 34: {
              result.hasTable = input.ReadBytes(ref result.table_);
              break;
            }
            case 42: {
              result.hasOriginalTable = input.ReadBytes(ref result.originalTable_);
              break;
            }
            case 50: {
              result.hasSchema = input.ReadBytes(ref result.schema_);
              break;
            }
            case 58: {
              result.hasCatalog = input.ReadBytes(ref result.catalog_);
              break;
            }
            case 64: {
              result.hasCollation = input.ReadUInt64(ref result.collation_);
              break;
            }
            case 72: {
              result.hasFractionalDigits = input.ReadUInt32(ref result.fractionalDigits_);
              break;
            }
            case 80: {
              result.hasLength = input.ReadUInt32(ref result.length_);
              break;
            }
            case 88: {
              result.hasFlags = input.ReadUInt32(ref result.flags_);
              break;
            }
            case 96: {
              result.hasContentType = input.ReadUInt32(ref result.contentType_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::Mysqlx.Resultset.ColumnMetaData.Types.FieldType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::Mysqlx.Resultset.ColumnMetaData.Types.FieldType value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::Mysqlx.Resultset.ColumnMetaData.Types.FieldType.SINT;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public pb::ByteString Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasOriginalName {
        get { return result.hasOriginalName; }
      }
      public pb::ByteString OriginalName {
        get { return result.OriginalName; }
        set { SetOriginalName(value); }
      }
      public Builder SetOriginalName(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOriginalName = true;
        result.originalName_ = value;
        return this;
      }
      public Builder ClearOriginalName() {
        PrepareBuilder();
        result.hasOriginalName = false;
        result.originalName_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasTable {
        get { return result.hasTable; }
      }
      public pb::ByteString Table {
        get { return result.Table; }
        set { SetTable(value); }
      }
      public Builder SetTable(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTable = true;
        result.table_ = value;
        return this;
      }
      public Builder ClearTable() {
        PrepareBuilder();
        result.hasTable = false;
        result.table_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasOriginalTable {
        get { return result.hasOriginalTable; }
      }
      public pb::ByteString OriginalTable {
        get { return result.OriginalTable; }
        set { SetOriginalTable(value); }
      }
      public Builder SetOriginalTable(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOriginalTable = true;
        result.originalTable_ = value;
        return this;
      }
      public Builder ClearOriginalTable() {
        PrepareBuilder();
        result.hasOriginalTable = false;
        result.originalTable_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasSchema {
        get { return result.hasSchema; }
      }
      public pb::ByteString Schema {
        get { return result.Schema; }
        set { SetSchema(value); }
      }
      public Builder SetSchema(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSchema = true;
        result.schema_ = value;
        return this;
      }
      public Builder ClearSchema() {
        PrepareBuilder();
        result.hasSchema = false;
        result.schema_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasCatalog {
        get { return result.hasCatalog; }
      }
      public pb::ByteString Catalog {
        get { return result.Catalog; }
        set { SetCatalog(value); }
      }
      public Builder SetCatalog(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCatalog = true;
        result.catalog_ = value;
        return this;
      }
      public Builder ClearCatalog() {
        PrepareBuilder();
        result.hasCatalog = false;
        result.catalog_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasCollation {
        get { return result.hasCollation; }
      }
      [global::System.CLSCompliant(false)]
      public ulong Collation {
        get { return result.Collation; }
        set { SetCollation(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCollation(ulong value) {
        PrepareBuilder();
        result.hasCollation = true;
        result.collation_ = value;
        return this;
      }
      public Builder ClearCollation() {
        PrepareBuilder();
        result.hasCollation = false;
        result.collation_ = 0UL;
        return this;
      }
      
      public bool HasFractionalDigits {
        get { return result.hasFractionalDigits; }
      }
      [global::System.CLSCompliant(false)]
      public uint FractionalDigits {
        get { return result.FractionalDigits; }
        set { SetFractionalDigits(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetFractionalDigits(uint value) {
        PrepareBuilder();
        result.hasFractionalDigits = true;
        result.fractionalDigits_ = value;
        return this;
      }
      public Builder ClearFractionalDigits() {
        PrepareBuilder();
        result.hasFractionalDigits = false;
        result.fractionalDigits_ = 0;
        return this;
      }
      
      public bool HasLength {
        get { return result.hasLength; }
      }
      [global::System.CLSCompliant(false)]
      public uint Length {
        get { return result.Length; }
        set { SetLength(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLength(uint value) {
        PrepareBuilder();
        result.hasLength = true;
        result.length_ = value;
        return this;
      }
      public Builder ClearLength() {
        PrepareBuilder();
        result.hasLength = false;
        result.length_ = 0;
        return this;
      }
      
      public bool HasFlags {
        get { return result.hasFlags; }
      }
      [global::System.CLSCompliant(false)]
      public uint Flags {
        get { return result.Flags; }
        set { SetFlags(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetFlags(uint value) {
        PrepareBuilder();
        result.hasFlags = true;
        result.flags_ = value;
        return this;
      }
      public Builder ClearFlags() {
        PrepareBuilder();
        result.hasFlags = false;
        result.flags_ = 0;
        return this;
      }
      
      public bool HasContentType {
        get { return result.hasContentType; }
      }
      [global::System.CLSCompliant(false)]
      public uint ContentType {
        get { return result.ContentType; }
        set { SetContentType(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetContentType(uint value) {
        PrepareBuilder();
        result.hasContentType = true;
        result.contentType_ = value;
        return this;
      }
      public Builder ClearContentType() {
        PrepareBuilder();
        result.hasContentType = false;
        result.contentType_ = 0;
        return this;
      }
    }
    static ColumnMetaData() {
      object.ReferenceEquals(global::Mysqlx.Resultset.MysqlxResultset.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class Row : pb::GeneratedMessage<Row, Row.Builder> {
    private Row() { }
    private static readonly Row defaultInstance = new Row().MakeReadOnly();
    private static readonly string[] _rowFieldNames = new string[] { "field" };
    private static readonly uint[] _rowFieldTags = new uint[] { 10 };
    public static Row DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Row DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Row ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mysqlx.Resultset.MysqlxResultset.internal__static_Mysqlx_Resultset_Row__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Row, Row.Builder> InternalFieldAccessors {
      get { return global::Mysqlx.Resultset.MysqlxResultset.internal__static_Mysqlx_Resultset_Row__FieldAccessorTable; }
    }
    
    public const int FieldFieldNumber = 1;
    private pbc::PopsicleList<pb::ByteString> field_ = new pbc::PopsicleList<pb::ByteString>();
    public scg::IList<pb::ByteString> FieldList {
      get { return pbc::Lists.AsReadOnly(field_); }
    }
    public int FieldCount {
      get { return field_.Count; }
    }
    public pb::ByteString GetField(int index) {
      return field_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _rowFieldNames;
      if (field_.Count > 0) {
        output.WriteBytesArray(1, field_names[0], field_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      {
        int dataSize = 0;
        foreach (pb::ByteString element in FieldList) {
          dataSize += pb::CodedOutputStream.ComputeBytesSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * field_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Row ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Row ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Row ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Row ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Row ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Row ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Row ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Row ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Row ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Row ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Row MakeReadOnly() {
      field_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Row prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Row, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Row cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Row result;
      
      private Row PrepareBuilder() {
        if (resultIsReadOnly) {
          Row original = result;
          result = new Row();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Row MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mysqlx.Resultset.Row.Descriptor; }
      }
      
      public override Row DefaultInstanceForType {
        get { return global::Mysqlx.Resultset.Row.DefaultInstance; }
      }
      
      public override Row BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Row) {
          return MergeFrom((Row) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Row other) {
        if (other == global::Mysqlx.Resultset.Row.DefaultInstance) return this;
        PrepareBuilder();
        if (other.field_.Count != 0) {
          result.field_.Add(other.field_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_rowFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _rowFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadBytesArray(tag, field_name, result.field_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<pb::ByteString> FieldList {
        get { return PrepareBuilder().field_; }
      }
      public int FieldCount {
        get { return result.FieldCount; }
      }
      public pb::ByteString GetField(int index) {
        return result.GetField(index);
      }
      public Builder SetField(int index, pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.field_[index] = value;
        return this;
      }
      public Builder AddField(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.field_.Add(value);
        return this;
      }
      public Builder AddRangeField(scg::IEnumerable<pb::ByteString> values) {
        PrepareBuilder();
        result.field_.Add(values);
        return this;
      }
      public Builder ClearField() {
        PrepareBuilder();
        result.field_.Clear();
        return this;
      }
    }
    static Row() {
      object.ReferenceEquals(global::Mysqlx.Resultset.MysqlxResultset.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
