// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Mysqlx.Session {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal static partial class MysqlxSession {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Mysqlx_Session_AuthenticateStart__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Session.AuthenticateStart, global::Mysqlx.Session.AuthenticateStart.Builder> internal__static_Mysqlx_Session_AuthenticateStart__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Mysqlx_Session_AuthenticateContinue__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Session.AuthenticateContinue, global::Mysqlx.Session.AuthenticateContinue.Builder> internal__static_Mysqlx_Session_AuthenticateContinue__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Mysqlx_Session_AuthenticateOk__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Session.AuthenticateOk, global::Mysqlx.Session.AuthenticateOk.Builder> internal__static_Mysqlx_Session_AuthenticateOk__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Mysqlx_Session_Reset__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Session.Reset, global::Mysqlx.Session.Reset.Builder> internal__static_Mysqlx_Session_Reset__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Mysqlx_Session_Close__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Session.Close, global::Mysqlx.Session.Close.Builder> internal__static_Mysqlx_Session_Close__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static MysqlxSession() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRteXNxbHhfc2Vzc2lvbi5wcm90bxIOTXlzcWx4LlNlc3Npb24iUwoRQXV0", 
            "aGVudGljYXRlU3RhcnQSEQoJbWVjaF9uYW1lGAEgAigJEhEKCWF1dGhfZGF0", 
            "YRgCIAEoDBIYChBpbml0aWFsX3Jlc3BvbnNlGAMgASgMIikKFEF1dGhlbnRp", 
            "Y2F0ZUNvbnRpbnVlEhEKCWF1dGhfZGF0YRgBIAIoDCIjCg5BdXRoZW50aWNh", 
            "dGVPaxIRCglhdXRoX2RhdGEYASABKAwiBwoFUmVzZXQiBwoFQ2xvc2VCHgoc", 
          "Y29tLm15c3FsLmNqLm15c3FseC5wcm90b2J1Zg=="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Mysqlx_Session_AuthenticateStart__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Mysqlx_Session_AuthenticateStart__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Session.AuthenticateStart, global::Mysqlx.Session.AuthenticateStart.Builder>(internal__static_Mysqlx_Session_AuthenticateStart__Descriptor,
                new string[] { "MechName", "AuthData", "InitialResponse", });
        internal__static_Mysqlx_Session_AuthenticateContinue__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Mysqlx_Session_AuthenticateContinue__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Session.AuthenticateContinue, global::Mysqlx.Session.AuthenticateContinue.Builder>(internal__static_Mysqlx_Session_AuthenticateContinue__Descriptor,
                new string[] { "AuthData", });
        internal__static_Mysqlx_Session_AuthenticateOk__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Mysqlx_Session_AuthenticateOk__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Session.AuthenticateOk, global::Mysqlx.Session.AuthenticateOk.Builder>(internal__static_Mysqlx_Session_AuthenticateOk__Descriptor,
                new string[] { "AuthData", });
        internal__static_Mysqlx_Session_Reset__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Mysqlx_Session_Reset__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Session.Reset, global::Mysqlx.Session.Reset.Builder>(internal__static_Mysqlx_Session_Reset__Descriptor,
                new string[] { });
        internal__static_Mysqlx_Session_Close__Descriptor = Descriptor.MessageTypes[4];
        internal__static_Mysqlx_Session_Close__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Session.Close, global::Mysqlx.Session.Close.Builder>(internal__static_Mysqlx_Session_Close__Descriptor,
                new string[] { });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class AuthenticateStart : pb::GeneratedMessage<AuthenticateStart, AuthenticateStart.Builder> {
    private AuthenticateStart() { }
    private static readonly AuthenticateStart defaultInstance = new AuthenticateStart().MakeReadOnly();
    private static readonly string[] _authenticateStartFieldNames = new string[] { "auth_data", "initial_response", "mech_name" };
    private static readonly uint[] _authenticateStartFieldTags = new uint[] { 18, 26, 10 };
    public static AuthenticateStart DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AuthenticateStart DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AuthenticateStart ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mysqlx.Session.MysqlxSession.internal__static_Mysqlx_Session_AuthenticateStart__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AuthenticateStart, AuthenticateStart.Builder> InternalFieldAccessors {
      get { return global::Mysqlx.Session.MysqlxSession.internal__static_Mysqlx_Session_AuthenticateStart__FieldAccessorTable; }
    }
    
    public const int MechNameFieldNumber = 1;
    private bool hasMechName;
    private string mechName_ = "";
    public bool HasMechName {
      get { return hasMechName; }
    }
    public string MechName {
      get { return mechName_; }
    }
    
    public const int AuthDataFieldNumber = 2;
    private bool hasAuthData;
    private pb::ByteString authData_ = pb::ByteString.Empty;
    public bool HasAuthData {
      get { return hasAuthData; }
    }
    public pb::ByteString AuthData {
      get { return authData_; }
    }
    
    public const int InitialResponseFieldNumber = 3;
    private bool hasInitialResponse;
    private pb::ByteString initialResponse_ = pb::ByteString.Empty;
    public bool HasInitialResponse {
      get { return hasInitialResponse; }
    }
    public pb::ByteString InitialResponse {
      get { return initialResponse_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMechName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _authenticateStartFieldNames;
      if (hasMechName) {
        output.WriteString(1, field_names[2], MechName);
      }
      if (hasAuthData) {
        output.WriteBytes(2, field_names[0], AuthData);
      }
      if (hasInitialResponse) {
        output.WriteBytes(3, field_names[1], InitialResponse);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMechName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, MechName);
      }
      if (hasAuthData) {
        size += pb::CodedOutputStream.ComputeBytesSize(2, AuthData);
      }
      if (hasInitialResponse) {
        size += pb::CodedOutputStream.ComputeBytesSize(3, InitialResponse);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static AuthenticateStart ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AuthenticateStart ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AuthenticateStart ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AuthenticateStart ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AuthenticateStart ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AuthenticateStart ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AuthenticateStart ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AuthenticateStart ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AuthenticateStart ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AuthenticateStart ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AuthenticateStart MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AuthenticateStart prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<AuthenticateStart, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AuthenticateStart cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AuthenticateStart result;
      
      private AuthenticateStart PrepareBuilder() {
        if (resultIsReadOnly) {
          AuthenticateStart original = result;
          result = new AuthenticateStart();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AuthenticateStart MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mysqlx.Session.AuthenticateStart.Descriptor; }
      }
      
      public override AuthenticateStart DefaultInstanceForType {
        get { return global::Mysqlx.Session.AuthenticateStart.DefaultInstance; }
      }
      
      public override AuthenticateStart BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AuthenticateStart) {
          return MergeFrom((AuthenticateStart) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AuthenticateStart other) {
        if (other == global::Mysqlx.Session.AuthenticateStart.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMechName) {
          MechName = other.MechName;
        }
        if (other.HasAuthData) {
          AuthData = other.AuthData;
        }
        if (other.HasInitialResponse) {
          InitialResponse = other.InitialResponse;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_authenticateStartFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _authenticateStartFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMechName = input.ReadString(ref result.mechName_);
              break;
            }
            case 18: {
              result.hasAuthData = input.ReadBytes(ref result.authData_);
              break;
            }
            case 26: {
              result.hasInitialResponse = input.ReadBytes(ref result.initialResponse_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMechName {
        get { return result.hasMechName; }
      }
      public string MechName {
        get { return result.MechName; }
        set { SetMechName(value); }
      }
      public Builder SetMechName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMechName = true;
        result.mechName_ = value;
        return this;
      }
      public Builder ClearMechName() {
        PrepareBuilder();
        result.hasMechName = false;
        result.mechName_ = "";
        return this;
      }
      
      public bool HasAuthData {
        get { return result.hasAuthData; }
      }
      public pb::ByteString AuthData {
        get { return result.AuthData; }
        set { SetAuthData(value); }
      }
      public Builder SetAuthData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAuthData = true;
        result.authData_ = value;
        return this;
      }
      public Builder ClearAuthData() {
        PrepareBuilder();
        result.hasAuthData = false;
        result.authData_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasInitialResponse {
        get { return result.hasInitialResponse; }
      }
      public pb::ByteString InitialResponse {
        get { return result.InitialResponse; }
        set { SetInitialResponse(value); }
      }
      public Builder SetInitialResponse(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInitialResponse = true;
        result.initialResponse_ = value;
        return this;
      }
      public Builder ClearInitialResponse() {
        PrepareBuilder();
        result.hasInitialResponse = false;
        result.initialResponse_ = pb::ByteString.Empty;
        return this;
      }
    }
    static AuthenticateStart() {
      object.ReferenceEquals(global::Mysqlx.Session.MysqlxSession.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class AuthenticateContinue : pb::GeneratedMessage<AuthenticateContinue, AuthenticateContinue.Builder> {
    private AuthenticateContinue() { }
    private static readonly AuthenticateContinue defaultInstance = new AuthenticateContinue().MakeReadOnly();
    private static readonly string[] _authenticateContinueFieldNames = new string[] { "auth_data" };
    private static readonly uint[] _authenticateContinueFieldTags = new uint[] { 10 };
    public static AuthenticateContinue DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AuthenticateContinue DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AuthenticateContinue ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mysqlx.Session.MysqlxSession.internal__static_Mysqlx_Session_AuthenticateContinue__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AuthenticateContinue, AuthenticateContinue.Builder> InternalFieldAccessors {
      get { return global::Mysqlx.Session.MysqlxSession.internal__static_Mysqlx_Session_AuthenticateContinue__FieldAccessorTable; }
    }
    
    public const int AuthDataFieldNumber = 1;
    private bool hasAuthData;
    private pb::ByteString authData_ = pb::ByteString.Empty;
    public bool HasAuthData {
      get { return hasAuthData; }
    }
    public pb::ByteString AuthData {
      get { return authData_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAuthData) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _authenticateContinueFieldNames;
      if (hasAuthData) {
        output.WriteBytes(1, field_names[0], AuthData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAuthData) {
        size += pb::CodedOutputStream.ComputeBytesSize(1, AuthData);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static AuthenticateContinue ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AuthenticateContinue ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AuthenticateContinue ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AuthenticateContinue ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AuthenticateContinue ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AuthenticateContinue ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AuthenticateContinue ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AuthenticateContinue ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AuthenticateContinue ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AuthenticateContinue ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AuthenticateContinue MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AuthenticateContinue prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<AuthenticateContinue, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AuthenticateContinue cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AuthenticateContinue result;
      
      private AuthenticateContinue PrepareBuilder() {
        if (resultIsReadOnly) {
          AuthenticateContinue original = result;
          result = new AuthenticateContinue();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AuthenticateContinue MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mysqlx.Session.AuthenticateContinue.Descriptor; }
      }
      
      public override AuthenticateContinue DefaultInstanceForType {
        get { return global::Mysqlx.Session.AuthenticateContinue.DefaultInstance; }
      }
      
      public override AuthenticateContinue BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AuthenticateContinue) {
          return MergeFrom((AuthenticateContinue) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AuthenticateContinue other) {
        if (other == global::Mysqlx.Session.AuthenticateContinue.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAuthData) {
          AuthData = other.AuthData;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_authenticateContinueFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _authenticateContinueFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasAuthData = input.ReadBytes(ref result.authData_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAuthData {
        get { return result.hasAuthData; }
      }
      public pb::ByteString AuthData {
        get { return result.AuthData; }
        set { SetAuthData(value); }
      }
      public Builder SetAuthData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAuthData = true;
        result.authData_ = value;
        return this;
      }
      public Builder ClearAuthData() {
        PrepareBuilder();
        result.hasAuthData = false;
        result.authData_ = pb::ByteString.Empty;
        return this;
      }
    }
    static AuthenticateContinue() {
      object.ReferenceEquals(global::Mysqlx.Session.MysqlxSession.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class AuthenticateOk : pb::GeneratedMessage<AuthenticateOk, AuthenticateOk.Builder> {
    private AuthenticateOk() { }
    private static readonly AuthenticateOk defaultInstance = new AuthenticateOk().MakeReadOnly();
    private static readonly string[] _authenticateOkFieldNames = new string[] { "auth_data" };
    private static readonly uint[] _authenticateOkFieldTags = new uint[] { 10 };
    public static AuthenticateOk DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AuthenticateOk DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AuthenticateOk ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mysqlx.Session.MysqlxSession.internal__static_Mysqlx_Session_AuthenticateOk__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AuthenticateOk, AuthenticateOk.Builder> InternalFieldAccessors {
      get { return global::Mysqlx.Session.MysqlxSession.internal__static_Mysqlx_Session_AuthenticateOk__FieldAccessorTable; }
    }
    
    public const int AuthDataFieldNumber = 1;
    private bool hasAuthData;
    private pb::ByteString authData_ = pb::ByteString.Empty;
    public bool HasAuthData {
      get { return hasAuthData; }
    }
    public pb::ByteString AuthData {
      get { return authData_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _authenticateOkFieldNames;
      if (hasAuthData) {
        output.WriteBytes(1, field_names[0], AuthData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAuthData) {
        size += pb::CodedOutputStream.ComputeBytesSize(1, AuthData);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static AuthenticateOk ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AuthenticateOk ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AuthenticateOk ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AuthenticateOk ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AuthenticateOk ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AuthenticateOk ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AuthenticateOk ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AuthenticateOk ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AuthenticateOk ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AuthenticateOk ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AuthenticateOk MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AuthenticateOk prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<AuthenticateOk, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AuthenticateOk cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AuthenticateOk result;
      
      private AuthenticateOk PrepareBuilder() {
        if (resultIsReadOnly) {
          AuthenticateOk original = result;
          result = new AuthenticateOk();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AuthenticateOk MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mysqlx.Session.AuthenticateOk.Descriptor; }
      }
      
      public override AuthenticateOk DefaultInstanceForType {
        get { return global::Mysqlx.Session.AuthenticateOk.DefaultInstance; }
      }
      
      public override AuthenticateOk BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AuthenticateOk) {
          return MergeFrom((AuthenticateOk) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AuthenticateOk other) {
        if (other == global::Mysqlx.Session.AuthenticateOk.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAuthData) {
          AuthData = other.AuthData;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_authenticateOkFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _authenticateOkFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasAuthData = input.ReadBytes(ref result.authData_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAuthData {
        get { return result.hasAuthData; }
      }
      public pb::ByteString AuthData {
        get { return result.AuthData; }
        set { SetAuthData(value); }
      }
      public Builder SetAuthData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAuthData = true;
        result.authData_ = value;
        return this;
      }
      public Builder ClearAuthData() {
        PrepareBuilder();
        result.hasAuthData = false;
        result.authData_ = pb::ByteString.Empty;
        return this;
      }
    }
    static AuthenticateOk() {
      object.ReferenceEquals(global::Mysqlx.Session.MysqlxSession.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class Reset : pb::GeneratedMessage<Reset, Reset.Builder> {
    private Reset() { }
    private static readonly Reset defaultInstance = new Reset().MakeReadOnly();
    private static readonly string[] _resetFieldNames = new string[] {  };
    private static readonly uint[] _resetFieldTags = new uint[] {  };
    public static Reset DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Reset DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Reset ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mysqlx.Session.MysqlxSession.internal__static_Mysqlx_Session_Reset__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Reset, Reset.Builder> InternalFieldAccessors {
      get { return global::Mysqlx.Session.MysqlxSession.internal__static_Mysqlx_Session_Reset__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _resetFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Reset ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Reset ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Reset ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Reset ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Reset ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Reset ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Reset ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Reset ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Reset ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Reset ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Reset MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Reset prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Reset, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Reset cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Reset result;
      
      private Reset PrepareBuilder() {
        if (resultIsReadOnly) {
          Reset original = result;
          result = new Reset();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Reset MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mysqlx.Session.Reset.Descriptor; }
      }
      
      public override Reset DefaultInstanceForType {
        get { return global::Mysqlx.Session.Reset.DefaultInstance; }
      }
      
      public override Reset BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Reset) {
          return MergeFrom((Reset) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Reset other) {
        if (other == global::Mysqlx.Session.Reset.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_resetFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _resetFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static Reset() {
      object.ReferenceEquals(global::Mysqlx.Session.MysqlxSession.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class Close : pb::GeneratedMessage<Close, Close.Builder> {
    private Close() { }
    private static readonly Close defaultInstance = new Close().MakeReadOnly();
    private static readonly string[] _closeFieldNames = new string[] {  };
    private static readonly uint[] _closeFieldTags = new uint[] {  };
    public static Close DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Close DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Close ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mysqlx.Session.MysqlxSession.internal__static_Mysqlx_Session_Close__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Close, Close.Builder> InternalFieldAccessors {
      get { return global::Mysqlx.Session.MysqlxSession.internal__static_Mysqlx_Session_Close__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _closeFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Close ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Close ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Close ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Close ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Close ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Close ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Close ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Close ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Close ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Close ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Close MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Close prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Close, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Close cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Close result;
      
      private Close PrepareBuilder() {
        if (resultIsReadOnly) {
          Close original = result;
          result = new Close();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Close MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mysqlx.Session.Close.Descriptor; }
      }
      
      public override Close DefaultInstanceForType {
        get { return global::Mysqlx.Session.Close.DefaultInstance; }
      }
      
      public override Close BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Close) {
          return MergeFrom((Close) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Close other) {
        if (other == global::Mysqlx.Session.Close.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_closeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _closeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static Close() {
      object.ReferenceEquals(global::Mysqlx.Session.MysqlxSession.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
