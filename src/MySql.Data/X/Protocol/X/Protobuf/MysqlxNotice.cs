// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Mysqlx.Notice {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal static partial class MysqlxNotice {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Mysqlx_Notice_Frame__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Notice.Frame, global::Mysqlx.Notice.Frame.Builder> internal__static_Mysqlx_Notice_Frame__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Mysqlx_Notice_Warning__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Notice.Warning, global::Mysqlx.Notice.Warning.Builder> internal__static_Mysqlx_Notice_Warning__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Mysqlx_Notice_SessionVariableChanged__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Notice.SessionVariableChanged, global::Mysqlx.Notice.SessionVariableChanged.Builder> internal__static_Mysqlx_Notice_SessionVariableChanged__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Mysqlx_Notice_SessionStateChanged__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Notice.SessionStateChanged, global::Mysqlx.Notice.SessionStateChanged.Builder> internal__static_Mysqlx_Notice_SessionStateChanged__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static MysqlxNotice() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNteXNxbHhfbm90aWNlLnByb3RvEg1NeXNxbHguTm90aWNlGhZteXNxbHhf", 
            "ZGF0YXR5cGVzLnByb3RvInkKBUZyYW1lEgwKBHR5cGUYASACKA0SMQoFc2Nv", 
            "cGUYAiABKA4yGi5NeXNxbHguTm90aWNlLkZyYW1lLlNjb3BlOgZHTE9CQUwS", 
            "DwoHcGF5bG9hZBgDIAEoDCIeCgVTY29wZRIKCgZHTE9CQUwQARIJCgVMT0NB", 
            "TBACIoUBCgdXYXJuaW5nEjQKBWxldmVsGAEgASgOMhwuTXlzcWx4Lk5vdGlj", 
            "ZS5XYXJuaW5nLkxldmVsOgdXQVJOSU5HEgwKBGNvZGUYAiACKA0SCwoDbXNn", 
            "GAMgAigJIikKBUxldmVsEggKBE5PVEUQARILCgdXQVJOSU5HEAISCQoFRVJS", 
            "T1IQAyJQChZTZXNzaW9uVmFyaWFibGVDaGFuZ2VkEg0KBXBhcmFtGAEgAigJ", 
            "EicKBXZhbHVlGAIgASgLMhguTXlzcWx4LkRhdGF0eXBlcy5TY2FsYXIi1QIK", 
            "E1Nlc3Npb25TdGF0ZUNoYW5nZWQSOwoFcGFyYW0YASACKA4yLC5NeXNxbHgu", 
            "Tm90aWNlLlNlc3Npb25TdGF0ZUNoYW5nZWQuUGFyYW1ldGVyEicKBXZhbHVl", 
            "GAIgASgLMhguTXlzcWx4LkRhdGF0eXBlcy5TY2FsYXIi1wEKCVBhcmFtZXRl", 
            "chISCg5DVVJSRU5UX1NDSEVNQRABEhMKD0FDQ09VTlRfRVhQSVJFRBACEhcK", 
            "E0dFTkVSQVRFRF9JTlNFUlRfSUQQAxIRCg1ST1dTX0FGRkVDVEVEEAQSDgoK", 
            "Uk9XU19GT1VORBAFEhAKDFJPV1NfTUFUQ0hFRBAGEhEKDVRSWF9DT01NSVRU", 
            "RUQQBxISCg5UUlhfUk9MTEVEQkFDSxAJEhQKEFBST0RVQ0VEX01FU1NBR0UQ", 
          "ChIWChJDTElFTlRfSURfQVNTSUdORUQQCw=="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Mysqlx_Notice_Frame__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Mysqlx_Notice_Frame__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Notice.Frame, global::Mysqlx.Notice.Frame.Builder>(internal__static_Mysqlx_Notice_Frame__Descriptor,
                new string[] { "Type", "Scope", "Payload", });
        internal__static_Mysqlx_Notice_Warning__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Mysqlx_Notice_Warning__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Notice.Warning, global::Mysqlx.Notice.Warning.Builder>(internal__static_Mysqlx_Notice_Warning__Descriptor,
                new string[] { "Level", "Code", "Msg", });
        internal__static_Mysqlx_Notice_SessionVariableChanged__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Mysqlx_Notice_SessionVariableChanged__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Notice.SessionVariableChanged, global::Mysqlx.Notice.SessionVariableChanged.Builder>(internal__static_Mysqlx_Notice_SessionVariableChanged__Descriptor,
                new string[] { "Param", "Value", });
        internal__static_Mysqlx_Notice_SessionStateChanged__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Mysqlx_Notice_SessionStateChanged__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Notice.SessionStateChanged, global::Mysqlx.Notice.SessionStateChanged.Builder>(internal__static_Mysqlx_Notice_SessionStateChanged__Descriptor,
                new string[] { "Param", "Value", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Mysqlx.Datatypes.MysqlxDatatypes.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class Frame : pb::GeneratedMessage<Frame, Frame.Builder> {
    private Frame() { }
    private static readonly Frame defaultInstance = new Frame().MakeReadOnly();
    private static readonly string[] _frameFieldNames = new string[] { "payload", "scope", "type" };
    private static readonly uint[] _frameFieldTags = new uint[] { 26, 16, 8 };
    public static Frame DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Frame DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Frame ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mysqlx.Notice.MysqlxNotice.internal__static_Mysqlx_Notice_Frame__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Frame, Frame.Builder> InternalFieldAccessors {
      get { return global::Mysqlx.Notice.MysqlxNotice.internal__static_Mysqlx_Notice_Frame__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Scope {
        GLOBAL = 1,
        LOCAL = 2,
      }
      
    }
    #endregion
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private uint type_;
    public bool HasType {
      get { return hasType; }
    }
    [global::System.CLSCompliant(false)]
    public uint Type {
      get { return type_; }
    }
    
    public const int ScopeFieldNumber = 2;
    private bool hasScope;
    private global::Mysqlx.Notice.Frame.Types.Scope scope_ = global::Mysqlx.Notice.Frame.Types.Scope.GLOBAL;
    public bool HasScope {
      get { return hasScope; }
    }
    public global::Mysqlx.Notice.Frame.Types.Scope Scope {
      get { return scope_; }
    }
    
    public const int PayloadFieldNumber = 3;
    private bool hasPayload;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    public bool HasPayload {
      get { return hasPayload; }
    }
    public pb::ByteString Payload {
      get { return payload_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _frameFieldNames;
      if (hasType) {
        output.WriteUInt32(1, field_names[2], Type);
      }
      if (hasScope) {
        output.WriteEnum(2, field_names[1], (int) Scope, Scope);
      }
      if (hasPayload) {
        output.WriteBytes(3, field_names[0], Payload);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasType) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Type);
      }
      if (hasScope) {
        size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Scope);
      }
      if (hasPayload) {
        size += pb::CodedOutputStream.ComputeBytesSize(3, Payload);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Frame ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Frame ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Frame ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Frame ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Frame ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Frame ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Frame ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Frame ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Frame ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Frame ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Frame MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Frame prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Frame, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Frame cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Frame result;
      
      private Frame PrepareBuilder() {
        if (resultIsReadOnly) {
          Frame original = result;
          result = new Frame();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Frame MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mysqlx.Notice.Frame.Descriptor; }
      }
      
      public override Frame DefaultInstanceForType {
        get { return global::Mysqlx.Notice.Frame.DefaultInstance; }
      }
      
      public override Frame BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Frame) {
          return MergeFrom((Frame) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Frame other) {
        if (other == global::Mysqlx.Notice.Frame.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasScope) {
          Scope = other.Scope;
        }
        if (other.HasPayload) {
          Payload = other.Payload;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_frameFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _frameFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasType = input.ReadUInt32(ref result.type_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.scope_, out unknown)) {
                result.hasScope = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 26: {
              result.hasPayload = input.ReadBytes(ref result.payload_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      [global::System.CLSCompliant(false)]
      public uint Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetType(uint value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasScope {
       get { return result.hasScope; }
      }
      public global::Mysqlx.Notice.Frame.Types.Scope Scope {
        get { return result.Scope; }
        set { SetScope(value); }
      }
      public Builder SetScope(global::Mysqlx.Notice.Frame.Types.Scope value) {
        PrepareBuilder();
        result.hasScope = true;
        result.scope_ = value;
        return this;
      }
      public Builder ClearScope() {
        PrepareBuilder();
        result.hasScope = false;
        result.scope_ = global::Mysqlx.Notice.Frame.Types.Scope.GLOBAL;
        return this;
      }
      
      public bool HasPayload {
        get { return result.hasPayload; }
      }
      public pb::ByteString Payload {
        get { return result.Payload; }
        set { SetPayload(value); }
      }
      public Builder SetPayload(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPayload = true;
        result.payload_ = value;
        return this;
      }
      public Builder ClearPayload() {
        PrepareBuilder();
        result.hasPayload = false;
        result.payload_ = pb::ByteString.Empty;
        return this;
      }
    }
    static Frame() {
      object.ReferenceEquals(global::Mysqlx.Notice.MysqlxNotice.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class Warning : pb::GeneratedMessage<Warning, Warning.Builder> {
    private Warning() { }
    private static readonly Warning defaultInstance = new Warning().MakeReadOnly();
    private static readonly string[] _warningFieldNames = new string[] { "code", "level", "msg" };
    private static readonly uint[] _warningFieldTags = new uint[] { 16, 8, 26 };
    public static Warning DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Warning DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Warning ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mysqlx.Notice.MysqlxNotice.internal__static_Mysqlx_Notice_Warning__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Warning, Warning.Builder> InternalFieldAccessors {
      get { return global::Mysqlx.Notice.MysqlxNotice.internal__static_Mysqlx_Notice_Warning__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Level {
        NOTE = 1,
        WARNING = 2,
        ERROR = 3,
      }
      
    }
    #endregion
    
    public const int LevelFieldNumber = 1;
    private bool hasLevel;
    private global::Mysqlx.Notice.Warning.Types.Level level_ = global::Mysqlx.Notice.Warning.Types.Level.WARNING;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public global::Mysqlx.Notice.Warning.Types.Level Level {
      get { return level_; }
    }
    
    public const int CodeFieldNumber = 2;
    private bool hasCode;
    private uint code_;
    public bool HasCode {
      get { return hasCode; }
    }
    [global::System.CLSCompliant(false)]
    public uint Code {
      get { return code_; }
    }
    
    public const int MsgFieldNumber = 3;
    private bool hasMsg;
    private string msg_ = "";
    public bool HasMsg {
      get { return hasMsg; }
    }
    public string Msg {
      get { return msg_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCode) return false;
        if (!hasMsg) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _warningFieldNames;
      if (hasLevel) {
        output.WriteEnum(1, field_names[1], (int) Level, Level);
      }
      if (hasCode) {
        output.WriteUInt32(2, field_names[0], Code);
      }
      if (hasMsg) {
        output.WriteString(3, field_names[2], Msg);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasLevel) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Level);
      }
      if (hasCode) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Code);
      }
      if (hasMsg) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Msg);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Warning ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Warning ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Warning ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Warning ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Warning ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Warning ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Warning ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Warning ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Warning ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Warning ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Warning MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Warning prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Warning, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Warning cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Warning result;
      
      private Warning PrepareBuilder() {
        if (resultIsReadOnly) {
          Warning original = result;
          result = new Warning();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Warning MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mysqlx.Notice.Warning.Descriptor; }
      }
      
      public override Warning DefaultInstanceForType {
        get { return global::Mysqlx.Notice.Warning.DefaultInstance; }
      }
      
      public override Warning BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Warning) {
          return MergeFrom((Warning) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Warning other) {
        if (other == global::Mysqlx.Notice.Warning.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLevel) {
          Level = other.Level;
        }
        if (other.HasCode) {
          Code = other.Code;
        }
        if (other.HasMsg) {
          Msg = other.Msg;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_warningFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _warningFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.level_, out unknown)) {
                result.hasLevel = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 16: {
              result.hasCode = input.ReadUInt32(ref result.code_);
              break;
            }
            case 26: {
              result.hasMsg = input.ReadString(ref result.msg_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLevel {
       get { return result.hasLevel; }
      }
      public global::Mysqlx.Notice.Warning.Types.Level Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(global::Mysqlx.Notice.Warning.Types.Level value) {
        PrepareBuilder();
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.hasLevel = false;
        result.level_ = global::Mysqlx.Notice.Warning.Types.Level.WARNING;
        return this;
      }
      
      public bool HasCode {
        get { return result.hasCode; }
      }
      [global::System.CLSCompliant(false)]
      public uint Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCode(uint value) {
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = 0;
        return this;
      }
      
      public bool HasMsg {
        get { return result.hasMsg; }
      }
      public string Msg {
        get { return result.Msg; }
        set { SetMsg(value); }
      }
      public Builder SetMsg(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMsg = true;
        result.msg_ = value;
        return this;
      }
      public Builder ClearMsg() {
        PrepareBuilder();
        result.hasMsg = false;
        result.msg_ = "";
        return this;
      }
    }
    static Warning() {
      object.ReferenceEquals(global::Mysqlx.Notice.MysqlxNotice.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class SessionVariableChanged : pb::GeneratedMessage<SessionVariableChanged, SessionVariableChanged.Builder> {
    private SessionVariableChanged() { }
    private static readonly SessionVariableChanged defaultInstance = new SessionVariableChanged().MakeReadOnly();
    private static readonly string[] _sessionVariableChangedFieldNames = new string[] { "param", "value" };
    private static readonly uint[] _sessionVariableChangedFieldTags = new uint[] { 10, 18 };
    public static SessionVariableChanged DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SessionVariableChanged DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SessionVariableChanged ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mysqlx.Notice.MysqlxNotice.internal__static_Mysqlx_Notice_SessionVariableChanged__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SessionVariableChanged, SessionVariableChanged.Builder> InternalFieldAccessors {
      get { return global::Mysqlx.Notice.MysqlxNotice.internal__static_Mysqlx_Notice_SessionVariableChanged__FieldAccessorTable; }
    }
    
    public const int ParamFieldNumber = 1;
    private bool hasParam;
    private string param_ = "";
    public bool HasParam {
      get { return hasParam; }
    }
    public string Param {
      get { return param_; }
    }
    
    public const int ValueFieldNumber = 2;
    private bool hasValue;
    private global::Mysqlx.Datatypes.Scalar value_;
    public bool HasValue {
      get { return hasValue; }
    }
    public global::Mysqlx.Datatypes.Scalar Value {
      get { return value_ ?? global::Mysqlx.Datatypes.Scalar.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasParam) return false;
        if (HasValue) {
          if (!Value.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _sessionVariableChangedFieldNames;
      if (hasParam) {
        output.WriteString(1, field_names[0], Param);
      }
      if (hasValue) {
        output.WriteMessage(2, field_names[1], Value);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasParam) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Param);
      }
      if (hasValue) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Value);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static SessionVariableChanged ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SessionVariableChanged ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SessionVariableChanged ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SessionVariableChanged ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SessionVariableChanged ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SessionVariableChanged ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SessionVariableChanged ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SessionVariableChanged ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SessionVariableChanged ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SessionVariableChanged ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SessionVariableChanged MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SessionVariableChanged prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SessionVariableChanged, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SessionVariableChanged cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SessionVariableChanged result;
      
      private SessionVariableChanged PrepareBuilder() {
        if (resultIsReadOnly) {
          SessionVariableChanged original = result;
          result = new SessionVariableChanged();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SessionVariableChanged MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mysqlx.Notice.SessionVariableChanged.Descriptor; }
      }
      
      public override SessionVariableChanged DefaultInstanceForType {
        get { return global::Mysqlx.Notice.SessionVariableChanged.DefaultInstance; }
      }
      
      public override SessionVariableChanged BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SessionVariableChanged) {
          return MergeFrom((SessionVariableChanged) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SessionVariableChanged other) {
        if (other == global::Mysqlx.Notice.SessionVariableChanged.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasParam) {
          Param = other.Param;
        }
        if (other.HasValue) {
          MergeValue(other.Value);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_sessionVariableChangedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _sessionVariableChangedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasParam = input.ReadString(ref result.param_);
              break;
            }
            case 18: {
              global::Mysqlx.Datatypes.Scalar.Builder subBuilder = global::Mysqlx.Datatypes.Scalar.CreateBuilder();
              if (result.hasValue) {
                subBuilder.MergeFrom(Value);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Value = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasParam {
        get { return result.hasParam; }
      }
      public string Param {
        get { return result.Param; }
        set { SetParam(value); }
      }
      public Builder SetParam(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasParam = true;
        result.param_ = value;
        return this;
      }
      public Builder ClearParam() {
        PrepareBuilder();
        result.hasParam = false;
        result.param_ = "";
        return this;
      }
      
      public bool HasValue {
       get { return result.hasValue; }
      }
      public global::Mysqlx.Datatypes.Scalar Value {
        get { return result.Value; }
        set { SetValue(value); }
      }
      public Builder SetValue(global::Mysqlx.Datatypes.Scalar value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasValue = true;
        result.value_ = value;
        return this;
      }
      public Builder SetValue(global::Mysqlx.Datatypes.Scalar.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasValue = true;
        result.value_ = builderForValue.Build();
        return this;
      }
      public Builder MergeValue(global::Mysqlx.Datatypes.Scalar value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasValue &&
            result.value_ != global::Mysqlx.Datatypes.Scalar.DefaultInstance) {
            result.value_ = global::Mysqlx.Datatypes.Scalar.CreateBuilder(result.value_).MergeFrom(value).BuildPartial();
        } else {
          result.value_ = value;
        }
        result.hasValue = true;
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.hasValue = false;
        result.value_ = null;
        return this;
      }
    }
    static SessionVariableChanged() {
      object.ReferenceEquals(global::Mysqlx.Notice.MysqlxNotice.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class SessionStateChanged : pb::GeneratedMessage<SessionStateChanged, SessionStateChanged.Builder> {
    private SessionStateChanged() { }
    private static readonly SessionStateChanged defaultInstance = new SessionStateChanged().MakeReadOnly();
    private static readonly string[] _sessionStateChangedFieldNames = new string[] { "param", "value" };
    private static readonly uint[] _sessionStateChangedFieldTags = new uint[] { 8, 18 };
    public static SessionStateChanged DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SessionStateChanged DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SessionStateChanged ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mysqlx.Notice.MysqlxNotice.internal__static_Mysqlx_Notice_SessionStateChanged__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SessionStateChanged, SessionStateChanged.Builder> InternalFieldAccessors {
      get { return global::Mysqlx.Notice.MysqlxNotice.internal__static_Mysqlx_Notice_SessionStateChanged__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Parameter {
        CURRENT_SCHEMA = 1,
        ACCOUNT_EXPIRED = 2,
        GENERATED_INSERT_ID = 3,
        ROWS_AFFECTED = 4,
        ROWS_FOUND = 5,
        ROWS_MATCHED = 6,
        TRX_COMMITTED = 7,
        TRX_ROLLEDBACK = 9,
        PRODUCED_MESSAGE = 10,
        CLIENT_ID_ASSIGNED = 11,
      }
      
    }
    #endregion
    
    public const int ParamFieldNumber = 1;
    private bool hasParam;
    private global::Mysqlx.Notice.SessionStateChanged.Types.Parameter param_ = global::Mysqlx.Notice.SessionStateChanged.Types.Parameter.CURRENT_SCHEMA;
    public bool HasParam {
      get { return hasParam; }
    }
    public global::Mysqlx.Notice.SessionStateChanged.Types.Parameter Param {
      get { return param_; }
    }
    
    public const int ValueFieldNumber = 2;
    private bool hasValue;
    private global::Mysqlx.Datatypes.Scalar value_;
    public bool HasValue {
      get { return hasValue; }
    }
    public global::Mysqlx.Datatypes.Scalar Value {
      get { return value_ ?? global::Mysqlx.Datatypes.Scalar.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasParam) return false;
        if (HasValue) {
          if (!Value.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _sessionStateChangedFieldNames;
      if (hasParam) {
        output.WriteEnum(1, field_names[0], (int) Param, Param);
      }
      if (hasValue) {
        output.WriteMessage(2, field_names[1], Value);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasParam) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Param);
      }
      if (hasValue) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Value);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static SessionStateChanged ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SessionStateChanged ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SessionStateChanged ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SessionStateChanged ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SessionStateChanged ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SessionStateChanged ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SessionStateChanged ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SessionStateChanged ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SessionStateChanged ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SessionStateChanged ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SessionStateChanged MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SessionStateChanged prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SessionStateChanged, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SessionStateChanged cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SessionStateChanged result;
      
      private SessionStateChanged PrepareBuilder() {
        if (resultIsReadOnly) {
          SessionStateChanged original = result;
          result = new SessionStateChanged();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SessionStateChanged MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mysqlx.Notice.SessionStateChanged.Descriptor; }
      }
      
      public override SessionStateChanged DefaultInstanceForType {
        get { return global::Mysqlx.Notice.SessionStateChanged.DefaultInstance; }
      }
      
      public override SessionStateChanged BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SessionStateChanged) {
          return MergeFrom((SessionStateChanged) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SessionStateChanged other) {
        if (other == global::Mysqlx.Notice.SessionStateChanged.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasParam) {
          Param = other.Param;
        }
        if (other.HasValue) {
          MergeValue(other.Value);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_sessionStateChangedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _sessionStateChangedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.param_, out unknown)) {
                result.hasParam = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              global::Mysqlx.Datatypes.Scalar.Builder subBuilder = global::Mysqlx.Datatypes.Scalar.CreateBuilder();
              if (result.hasValue) {
                subBuilder.MergeFrom(Value);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Value = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasParam {
       get { return result.hasParam; }
      }
      public global::Mysqlx.Notice.SessionStateChanged.Types.Parameter Param {
        get { return result.Param; }
        set { SetParam(value); }
      }
      public Builder SetParam(global::Mysqlx.Notice.SessionStateChanged.Types.Parameter value) {
        PrepareBuilder();
        result.hasParam = true;
        result.param_ = value;
        return this;
      }
      public Builder ClearParam() {
        PrepareBuilder();
        result.hasParam = false;
        result.param_ = global::Mysqlx.Notice.SessionStateChanged.Types.Parameter.CURRENT_SCHEMA;
        return this;
      }
      
      public bool HasValue {
       get { return result.hasValue; }
      }
      public global::Mysqlx.Datatypes.Scalar Value {
        get { return result.Value; }
        set { SetValue(value); }
      }
      public Builder SetValue(global::Mysqlx.Datatypes.Scalar value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasValue = true;
        result.value_ = value;
        return this;
      }
      public Builder SetValue(global::Mysqlx.Datatypes.Scalar.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasValue = true;
        result.value_ = builderForValue.Build();
        return this;
      }
      public Builder MergeValue(global::Mysqlx.Datatypes.Scalar value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasValue &&
            result.value_ != global::Mysqlx.Datatypes.Scalar.DefaultInstance) {
            result.value_ = global::Mysqlx.Datatypes.Scalar.CreateBuilder(result.value_).MergeFrom(value).BuildPartial();
        } else {
          result.value_ = value;
        }
        result.hasValue = true;
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.hasValue = false;
        result.value_ = null;
        return this;
      }
    }
    static SessionStateChanged() {
      object.ReferenceEquals(global::Mysqlx.Notice.MysqlxNotice.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
